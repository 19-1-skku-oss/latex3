%
% Copyright (C) 2012,2014,2015 LaTeX3 Project
%

\documentclass{minimal}
\input{regression-test}

\RequirePackage{xparse}

\begin{document}
\START
\AUTHOR{Joseph Wright, Bruno Le Floch}
\ExplSyntaxOn

\OMIT
\cs_new:Npn \TYPELONG #1 {
  \if_meaning:w #1 \par
    \TYPE { <<par>> }
  \else:
    \TYPE { (#1) }
  \fi:
}
\TIMO

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Basic~definitions~r-type~arguments }
  {
    \DeclareDocumentCommand \foo { o r ( ) m } { \TYPE { (#1) (#2) (#3) } }
    \foo ( here ) { there }
    \foo [ nothing ] ( here ) { there }
    \foo [ ] ( ( ) here ( ) ) { there }
    \DeclareDocumentCommand \foo { o m r [ ] } { \TYPE { (#1) (#2) (#3) } }
    \foo [ stuff ] { is } [ [ here ] ]
    \foo { is } [ [ here ] ]
    \DeclareDocumentCommand \foo { r ( ) r ( ) } { \TYPE { (#1) (#2) } }
    \foo ( bar ) ( baz )
  }

\TEST { Basic~definitions~R-type~arguments }
  {
    \DeclareDocumentCommand \foo { o R ( ) { drat } m }
      { \TYPE { (#1) (#2) (#3) } }
    \foo ( here ) { there }
    \foo [ nothing ] ( here ) { there }
    \foo [ ] ( ( ) here ( ) ) { there }
    \DeclareDocumentCommand \foo { o m R [ ] { drat } }
      { \TYPE { (#1) (#2) (#3) } }
    \foo [ stuff ] { is } [ [ here ] ]
    \foo { is } [ [ here ] ]
    \DeclareDocumentCommand \foo { R ( ) { drat }R ( ) { drat } }
      { \TYPE { (#1) (#2) } }
    \foo ( bar ) ( baz )
  }

\TEST { r-type~argument~errors }
  {
    \DeclareDocumentCommand \foo { o r ( ) m } { \TYPE { (#1) (#2) (#3) } }
    \foo { there }
    \foo [ nothing ] { there }
    \DeclareDocumentCommand \foo { o m r [ ] } { \TYPE { (#1) (#2) (#3) } }
    \foo [ stuff ] { is }
    \DeclareDocumentCommand \foo { r ( ) r ( ) } { \TYPE { (#1) (#2) } }
    \foo stop
  }

\TEST { R-type~argument~errors }
  {
    \DeclareDocumentCommand \foo { o R ( ) { drat } m }
      { \TYPE { (#1) (#2) (#3) } }
    \foo { there }
    \foo [ nothing ] { there }
    \DeclareDocumentCommand \foo { o m R [ ] { drat } }
      { \TYPE { (#1) (#2) (#3) } }
    \foo [ stuff ] { is }
    \DeclareDocumentCommand \foo { R ( ) { drat } R ( ) { drat } }
      { \TYPE { (#1) (#2) } }
    \foo stop
  }

\TEST { Basic~e-type~argument~definitions }
  {
    \DeclareDocumentCommand \foo { e { ^ _ } m }
      { \TYPE { (#1) (#2) } }
    \foo { there }
    \foo ^ { up } { here }
    \foo _ { down } { here }
    \foo ^ { up } _ { down } { here }
    \DeclareDocumentCommand \foo { e { ^ _ } }
      { \TYPE { (#1) } }
    \foo stop
    \foo ^ { up } stop
    \foo _ { down } stop
    \foo ^ { up } _ { down } stop
  }

\TEST { Bad~arg~specs }
  {
    \OMIT
    \cs_undefine:N \foo
    \TIMO
    \DeclareDocumentCommand \foo { d m } { }
    \cs_log:N \foo
    \DeclareDocumentCommand \foo { t } { }
    \cs_log:N \foo
    \DeclareDocumentCommand \foo { r { oh } { no } } { }
    \cs_log:N \foo
    \DeclareDocumentCommand \foo { D { } { } { } } { }
    \cs_log:N \foo
    \DeclareDocumentCommand \foo { D { ~ X ~ } { { Y } } { } } { }
    \cs_log:N \foo
    \DeclareDocumentCommand \foo { + >{\ReverseBoolean} } { }
    \cs_log:N \foo
    \DeclareExpandableDocumentCommand \foo { + >{\ReverseBoolean} } { }
    \cs_log:N \foo
  }

\TEST { Stripping~braces~in~optional~args }
  {
    \DeclareDocumentCommand \foo { o m } { \TYPE { (#1) (#2) }}
    \foo [ ] { baz }
    \foo [ { bar } ] { baz }
    \foo [ { ~ bar } ] { baz }
    \foo [ { bar ~ } ] { baz }
    \foo [ ~ { bar } ] { baz }
    \foo [ { bar } ~ ] { baz }
    \foo [ ~ ] { baz }
    \foo [ { } ] { baz }
    \foo [ { ~ } ] { baz }
    \foo [ [ { bar } ] ] { baz }
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\TEST { Get~and~show~argument~spec }
  {
    \OMIT
    \DeclareDocumentCommand { \null } { } { }
    \DeclareDocumentCommand { \foo } { >{\SplitList{;}} m +o g } { }
    \DeclareDocumentEnvironment { nullenv } { } { } { }
    \DeclareDocumentEnvironment { fooenv } { v D{$}{$} l u{!} } { } { }
    \TIMO
    \GetDocumentCommandArgSpec { \null } \TYPE { | \ArgumentSpecification | }
    \ShowDocumentCommandArgSpec { \null }
    \GetDocumentCommandArgSpec { \foo } \TYPE { | \ArgumentSpecification | }
    \ShowDocumentCommandArgSpec { \foo }
    \GetDocumentEnvironmentArgSpec { nullenv } \TYPE { | \ArgumentSpecification | }
    \ShowDocumentEnvironmentArgSpec { nullenv }
    \GetDocumentEnvironmentArgSpec { fooenv } \TYPE { | \ArgumentSpecification | }
    \ShowDocumentEnvironmentArgSpec { fooenv }
  }

\TEST { First~argument~must~be~a~command }
  {
    \DeclareDocumentCommand           { \foo! } { x } { y }
    \NewDocumentCommand               { \foo! } { x } { y }
    \RenewDocumentCommand             { \foo! } { x } { y }
    \ProvideDocumentCommand           { \foo! } { x } { y }
    \DeclareExpandableDocumentCommand { \foo! } { x } { y }
    \GetDocumentCommandArgSpec        { \foo! }
    \ShowDocumentCommandArgSpec       { \foo! }
    \DeclareDocumentCommand           { foo } { x } { y }
    \NewDocumentCommand               { foo } { x } { y }
    \RenewDocumentCommand             { foo } { x } { y }
    \ProvideDocumentCommand           { foo } { x } { y }
    \DeclareExpandableDocumentCommand { foo } { x } { y }
    \GetDocumentCommandArgSpec        { foo }
    \ShowDocumentCommandArgSpec       { foo }
    \DeclareDocumentCommand           { # } { x } { y }
    \NewDocumentCommand               { # } { x } { y }
    \RenewDocumentCommand             { # } { x } { y }
    \ProvideDocumentCommand           { # } { x } { y }
    \DeclareExpandableDocumentCommand { # } { x } { y }
    \GetDocumentCommandArgSpec        { # }
    \ShowDocumentCommandArgSpec       { # }
    \DeclareDocumentCommand           { ~\?~ } { m } { y }
    \NewDocumentCommand               { ~\?~ } { m } { y }
    \RenewDocumentCommand             { ~\?~ } { m } { y }
    \ProvideDocumentCommand           { ~\?~ } { m } { y }
    \DeclareExpandableDocumentCommand { ~\?~ } { m } { y }
    \GetDocumentCommandArgSpec        { ~\?~ }
    \ShowDocumentCommandArgSpec       { ~\?~ }
  }

\TEST { SplitList }
  {
    \DeclareDocumentCommand { \foo } { > { \SplitList {)||(\BOOM\c_false_bool} } m } { \tl_log:n {#1} }
    { \foo { a ( b } }
  }

\END
