% \iffalse meta-comment
%
%% File: l3draw-points.dtx Copyright(C) 2018 The LaTeX3 Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    http://www.latex-project.org/lppl.txt
%
% This file is part of the "l3trial bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/latex3
%
% for those people who are interested.
%
%<*driver>
\RequirePackage{expl3}
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3draw-points} package\\ Calculating points^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released 2018/02/05}
%
% \maketitle
%
% \begin{implementation}
%
% \section{\pkg{l3draw-points} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=draw>
%    \end{macrocode}
%
% \subsection{Support functions}
%
% \begin{macro}{\@@_point_process:nn}
%   Execute whatever code is passed to extract the $x$ and $y$ co-ordinates.
%   The second argument here should itself absorb two arguments.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_point_process:nn #1#2
  {
    \use:x { \exp_not:n {#2} #1 }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP]{\@@_point_expand:nnN}
% \begin{macro}[EXP]{\@@_point_expand_auxi:nnN, \@@_point_expand_auxi:ffN}
% \begin{macro}[EXP]{\@@_point_expand_auxii:nnnnN}
% \begin{macro}[EXP]
%   {\@@_point_expand_auxiii:nnnnN, \@@_point_expand_auxiii:ffnnN}
%   The aim here is to expand the point expressions fully. As each one will
%   contain two co-ordinates, we have to \texttt{f}-type expand twice: once
%   to get the co-ordinate pairs (brace groups), then to deal with each of the
%   arguments. As the overhead for expansion is small compared with
%   calculations, everything gets done.
%    \begin{macrocode}
\cs_new:Npn \@@_point_expand:nnN #1#2#3
  { \@@_point_expand_auxi:ffN {#1} {#2} #3 }
\cs_new:Npn \@@_point_expand_auxi:nnN #1#2#3
  { \@@_point_expand_auxii:nnnnN #1 #2 #3 }
\cs_generate_variant:Nn \@@_point_expand_auxi:nnN { ff }
\cs_new:Npn \@@_point_expand_auxii:nnnnN #1#2#3#4#5
  { \@@_point_expand_auxiii:ffffN {#1} {#2} {#3} {#4} #5 }
\cs_new:Npn \@@_point_expand_auxiii:nnnnN #1#2#3#4#5
  { #5 {#1} {#2} {#3} {#4} }
\cs_generate_variant:Nn \@@_point_expand_auxiii:nnnnN { ffff }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Co-ordinates}	
%
% The most basic way of giving points is as simple $(x,y)$ co-ordinates.
%
% \begin{macro}[EXP]{\draw_point_coord:nn}
%   Simply turn the given values into dimensions.
%    \begin{macrocode}
\cs_new:Npn \draw_point_coord:nn #1#2
  {
    { \fp_to_dim:n {#1} }
    { \fp_to_dim:n {#2} }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Polar co-ordinates}
%
% \begin{macro}[EXP]{\draw_point_polar:nn}
% \begin{macro}[EXP]{\@@_draw_polar:nw, \@@_draw_polar:fw}
%   Polar co-ordinates may have either one or two lengths, so there is a need
%   to do a simple split before the calculation. As the angle gets used twice,
%   save on any expression evaluation there and force expansion.
%    \begin{macrocode}
\cs_new:Npn \draw_point_polar:nn #1#2
  { \@@_draw_polar:fw { \fp_eval:n {#1} } #2 ~ and ~ #2 ~ \q_stop }
\cs_new:Npn \@@_draw_polar:nw #1#2 ~ and ~ #3 ~ #4 \q_stop
  {
    { \fp_to_dim:n { cosd(#1) * (#2) } }
    { \fp_to_dim:n { sind(#1) * (#3) } }
  }
\cs_generate_variant:Nn \@@_draw_polar:nw { f }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Point expression arithmetic}
%
% These functions all take point expressions as arguments.
%
% \begin{macro}[EXP]{\draw_point_add:nn, \draw_point_diff:nn}
% \begin{macro}[EXP]{\@@_point_add:nnnn, \@@_point_diff:nnnn}
%   Simple maths once the expansion is done.
%    \begin{macrocode}
\cs_new:Npn \draw_point_add:nn #1#2
  {
    \@@_point_expand:nnN {#1} {#2}
      \@@_point_add:nnnn
  }
\cs_new:Npn \@@_point_add:nnnn #1#2#3#4
  {
    { \fp_to_dim:n { #1 + #3 } }
    { \fp_to_dim:n { #2 + #4 } }
  }
\cs_new:Npn \draw_point_diff:nn #1#2
  {
    \@@_point_expand:nnN {#1} {#2}
      \@@_point_diff:nnnn
  }
\cs_new:Npn \@@_point_diff:nnnn #1#2#3#4
  {
    { \fp_to_dim:n { #3 - #1 } }
    { \fp_to_dim:n { #4 - #2 } }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\draw_point_scale:nn}
% \begin{macro}[EXP]{\@@_point_scale:nnnn}
%   Much the same idea, but as argument |#1| here is a simple floating point
%   expression there is a bit of \enquote{cheating} to reuse the expansion
%   mechanism.
%    \begin{macrocode}
\cs_new:Npn \draw_point_scale:nn #1#2
  {
    \@@_point_expand:nnN { { \fp_eval:n {#1} } { } } {#2}
      \@@_point_scale:nnnn
  }
\cs_new:Npn \@@_point_scale:nnnn #1#2#3#4
  {
    { \fp_to_dim:n { #1 * #3 } }
    { \fp_to_dim:n { #1 * #4 } }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\draw_point_normalise:n}
% \begin{macro}[EXP]{\@@_point_normalise:n, \@@_point_normalise:f}
% \begin{macro}[EXP]{\@@_point_normalise:nn, \@@_point_normalise:ff}
% \begin{macro}[EXP]{\@@_point_normalise:nnn, \@@_point_normalise:fnn}
%   Only a single point expression so the expansion is done here. The
%   outcomes are easy enough
%   \[
%     P_{x} = \frac{x}{x^{2} + y^{2}} \quad
%     P_{y} = \frac{y}{x^{2} + y^{2}}
%   \]
%   with the obvious optimisation of only evaluating the denominator
%   once.
%    \begin{macrocode}
\cs_new:Npn \draw_point_normalise:n #1
  { \@@_point_normalise:f {#1} }
\cs_new:Npn \@@_point_normalise:n #1
  { \@@_point_normalise:ff #1 }
\cs_generate_variant:Nn \@@_point_normalise:n { f }
\cs_new:Npn \@@_point_normalise:nn #1#2
  {
    \@@_point_normalise:fnn
      { \fp_eval:n { #1 * #1 + #2 * #2 } }
      {#1} {#2}
  }
\cs_generate_variant:Nn \@@_point_normalise:nn { ff }
\cs_new:Npn \@@_point_normalise:nnn #1#2#3
  {
    { \fp_to_dim:n { #2 / #1 } }
    { \fp_to_dim:n { #3 / #1 } }
  }
\cs_generate_variant:Nn \@@_point_normalise:nnn { f }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Intersection calculations}
%
% \begin{macro}[EXP]{\draw_point_linejoin:nnnn}
% \begin{macro}[EXP]{\@@_point_linejoin:nnnnnn}
% \begin{macro}[EXP]{\@@_point_linejoin:nnnnnnnn}
% \begin{macro}[EXP]
%   {\@@_point_linejoin_aux:nnnnnn, \@@_point_linejoin_aux:ffffff}
% \begin{macro}[EXP]
%   {\@@_point_linejoin_aux:fnnnnnn, \@@_point_linejoin_aux:fnnnnnn}
%    The intersection point~$P$ between a line joining points $(x_{1}, y_{1})$
%    and $(x_{2}, y_{2})$ with a second line joining points $(x_{3}, y_{3})$
%    and $(x_{4}, y_{4})$ can be calculated using the formulae
%    \[
%      P_{x} =
%          \frac{(x_{1}y_{2} - y_{1}x_{2})(x_{3} - x_{4})
%            - (x_{3}y_{4} - y_{3}x_{4})(x_{1} - x_{2})}
%          {(x_{1} - x_{2})(y_{3} - y_{4}) - (y_{1} - y_{2})(x_{3} - x_{4})}
%    \]
%    and
%    \[
%      P_{y} =
%          \frac{(x_{1}y_{2} - y_{1}x_{2})(y_{3} - y_{5})
%          - (x_{3}y_{4} - y_{3}x_{4})(y_{1} - y_{2})}
%          {(x_{1} - x_{2})(y_{3} - y_{4}) - (y_{1} - y_{2})(x_{3} - x_{4})} 
%    \]
%    The work therefore comes down to expanding the incoming data, then
%    pre-calculating as many parts as possible before the final work to find
%    the intersection. (Expansion and argument re-ordering is much less work
%    than additional floating point calculations.)
%    \begin{macrocode}
\cs_new:Npn \draw_point_linejoin:nnnn #1#2#3#4
  {
    \@@_point_expand:nnN {#1} {#2}
      \@@_point_linejoin:nnnnnn
      {#3} {#4}
  }
\cs_new:Npn \@@_point_linejoin:nnnnnn #1#2#3#4#5#6
  {
    \@@_point_expand:nnN {#5} {#6}
      \@@_point_linejoin:nnnnnnnn
      {#1} {#2} {#3} {#4}
  }
\cs_new:Npn \@@_point_linejoin:nnnnnnnn #1#2#3#4#5#6#7#8
  {
    \@@_point_linejoin_aux:ffffff
      { \fp_eval:n { #1 * #4 - #2 * #3 } }
      { \fp_eval:n { #5 * #8 - #6 * #7 } }
      { \fp_eval:n { #1 - #3 } }
      { \fp_eval:n { #5 - #7 } }
      { \fp_eval:n { #2 - #4 } }
      { \fp_eval:n { #6 - #8 } }
  }
\cs_new:Npn \@@_point_linejoin_aux:nnnnnn #1#2#3#4#5#6
  {
    \@@_point_linejoin_aux:fnnnnnn
      { \fp_eval:n { #3 * #6 - #5 * #4 } }
      {#1} {#2} {#3} {#4} {#5} {#6}
  }
\cs_generate_variant:Nn \@@_point_linejoin_aux:nnnnnn { ffffff }
\cs_new:Npn \@@_point_linejoin_aux:nnnnnnn #1#2#3#4#5#6#7
  {
    { \fp_to_dim:n { (#2 * #5 - #3 * #6 ) / #1 } }
    { \fp_to_dim:n { (#2 * #7 - #3 * #6 ) / #1 } }
  }
\cs_generate_variant:Nn \@@_point_linejoin_aux:nnnnnnn { f }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Vector support}
%
% As well as co-ordinates relative to the drawing 
%
% \begin{variable}
%   {
%     \l_@@_xvec_x_dim,
%     \l_@@_xvec_y_dim,
%     \l_@@_yvec_x_dim,
%     \l_@@_yvec_y_dim,
%     \l_@@_zvec_x_dim,
%     \l_@@_zvec_y_dim
%   }
%   Base vectors to map to the underlying two-dimensional drawing space.
%    \begin{macrocode}
\dim_new:N \l_@@_xvec_x_dim
\dim_new:N \l_@@_xvec_y_dim
\dim_new:N \l_@@_yvec_x_dim
\dim_new:N \l_@@_yvec_y_dim
\dim_new:N \l_@@_zvec_x_dim
\dim_new:N \l_@@_zvec_y_dim
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\draw_set_xvec:n, \draw_set_yvec:n, \draw_set_zvec:n}
% \begin{macro}{\@@_set_vec:nn}
% \begin{macro}{\@@_set_vec:nnn}
%   Calculate the underlying position and store it.
%    \begin{macrocode}
\cs_new_protected:Npn \draw_set_xvec:n #1
  { \@@_set_vec:nn { x } {#1} }
\cs_new_protected:Npn \draw_set_yvec:n #1
  { \@@_set_vec:nn { y } {#1} }
\cs_new_protected:Npn \draw_set_zvec:n #1
  { \@@_set_vec:nn { y } {#1} }
\cs_new_protected:Npn \@@_set_vec:nn #1#2
  {
    \@@_point_process:nn {#2} { \@@_set_vec:nnn {#1} }
  }
\cs_new_protected:Npn \@@_set_vec:nnn #1#2#3
  {
    \dim_set:cn { l_@@_ #1 vec_x_dim } {#2}
    \dim_set:cn { l_@@_ #1 vec_y_dim } {#3}
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% Initialise the vectors.
%    \begin{macrocode}
\draw_set_xvec:n { \draw_point_coord:nn { 1cm } { 0cm } }
\draw_set_yvec:n { \draw_point_coord:nn { 0cm } { 1cm } }
\draw_set_zvec:n { \draw_point_coord:nn { -0.385cm } { -0.385cm } }
%    \end{macrocode}
%
% \begin{macro}[EXP]{\draw_point_vec:nn}
% \begin{macro}[EXP]{\@@_point_vec:nn, \@@_point_vec:ff}
% \begin{macro}[EXP]{\draw_point_vec:nnn}
% \begin{macro}[EXP]{\@@_point_vec:nnn, \@@_point_vec:fff}
%   Force a single evaluation of each factor, then use these to work out the
%   underlying point.
%    \begin{macrocode}
\cs_new:Npn \draw_point_vec:nn #1#2
  { \@@_point_vec:ff { \fp_eval:n {#1} } { \fp_eval:n {#2} } }
\cs_new:Npn \@@_point_vec:nn #1#2
  {
    {
      \fp_to_dim:n
        { #1 * \l_@@_xvec_x_dim + #2 * \l_@@_yvec_x_dim }
    }
    {
      \fp_to_dim:n
        { #1 * \l_@@_xvec_y_dim + #2 * \l_@@_yvec_y_dim }
    }
  }
\cs_generate_variant:Nn \@@_point_vec:nn { ff }
\cs_new:Npn \draw_point_vec:nnn #1#2#3
  {
    \@@_point_vec:fff
      { \fp_eval:n {#1} } { \fp_eval:n {#2} } { \fp_eval:n {#3} }
  }
\cs_new:Npn \@@_point_vec:nnn #1#2#3
  {
    {
      \fp_to_dim:n
        { 
            #1 * \l_@@_xvec_x_dim
          + #2 * \l_@@_yvec_x_dim
          + #3 * \l_@@_zvec_x_dim
        }
    }
    {
      \fp_to_dim:n
        {
            #1 * \l_@@_xvec_y_dim
          + #2 * \l_@@_yvec_y_dim
          + #3 * \l_@@_zvec_y_dim
        }
    }
  }
\cs_generate_variant:Nn \@@_point_vec:nnn { fff }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
