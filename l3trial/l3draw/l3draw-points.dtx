% \iffalse meta-comment
%
%% File: l3draw-points.dtx Copyright(C) 2018 The LaTeX3 Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    http://www.latex-project.org/lppl.txt
%
% This file is part of the "l3trial bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/latex3
%
% for those people who are interested.
%
%<*driver>
\RequirePackage{expl3}
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \pkg{l3draw-points} package\\ Calculating points^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released 2018/02/05}
%
% \maketitle
%
% \begin{implementation}
%
% \section{\pkg{l3draw-points} implementation}
%
%    \begin{macrocode}
%<*initex|package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=draw>
%    \end{macrocode}
%
% \subsection{Support functions}
%
% \begin{macro}{\@@_point_process:nn}
%   Execute whatever code is passed to extract the $x$ and $y$ co-ordinates.
%   The second argument here should itself absorb two arguments.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_point_process:nn #1#2
  {
    \use:x { \exp_not:n {#2} #1 }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP]{\@@_point_expand:nnN}
% \begin{macro}[EXP]{\@@_point_expand_auxi:nnN, \@@_point_expand_auxi:ffN}
% \begin{macro}[EXP]{\@@_point_expand_auxii:nnnnN}
% \begin{macro}[EXP]
%   {\@@_point_expand_auxiii:nnnnN, \@@_point_expand_auxiii:ffnnN}
%   The aim here is to expand the point expressions fully. As each one will
%   contain two co-ordinates, we have to \texttt{f}-type expand twice: once
%   to get the co-ordinate pairs (brace groups), then to deal with each of the
%   arguments. As the overhead for expansion is small compared with
%   calculations, everything gets done.
%    \begin{macrocode}
\cs_new:Npn \@@_point_expand:nnN #1#2#3
  { \@@_point_expand_auxi:ffN {#1} {#2} #3 }
\cs_new:Npn \@@_point_expand_auxi:nnN #1#2#3
  { \@@_point_expand_auxii:nnnnN #1 #2 #3 }
\cs_generate_variant:Nn \@@_point_expand_auxi:nnN { ff }
\cs_new:Npn \@@_point_expand_auxii:nnnnN #1#2#3#4#5
  { \@@_point_expand_auxiii:ffffN {#1} {#2} {#3} {#4} #5 }
\cs_new:Npn \@@_point_expand_auxiii:nnnnN #1#2#3#4#5
  { #5 {#1} {#2} {#3} {#4} }
\cs_generate_variant:Nn \@@_point_expand_auxiii:nnnnN { ffff }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Co-ordinates}	
%
% The most basic way of giving points is as simple $(x,y)$ co-ordinates.
%
% \begin{macro}[EXP]{\draw_point_coord:nn}
%   Simply turn the given values into dimensions.
%    \begin{macrocode}
\cs_new:Npn \draw_point_coord:nn #1#2
  {
    { \fp_to_dim:n {#1} }
    { \fp_to_dim:n {#2} }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Polar co-ordinates}
%
% \begin{macro}[EXP]{\draw_point_polar:nn}
% \begin{macro}[EXP]{\@@_draw_polar:nw, \@@_draw_polar:fw}
%   Polar co-ordinates may have either one or two lengths, so there is a need
%   to do a simple split before the calculation. As the angle gets used twice,
%   save on any expression evaluation there and force expansion.
%    \begin{macrocode}
\cs_new:Npn \draw_point_polar:nn #1#2
  { \@@_draw_polar:fw { \fp_eval:n {#1} } #2 ~ and ~ #2 ~ \q_stop }
\cs_new:Npn \@@_draw_polar:nw #1#2 ~ and ~ #3 ~ #4 \q_stop
  {
    { \fp_to_dim:n { cosd(#1) * (#2) } }
    { \fp_to_dim:n { sind(#1) * (#3) } }
  }
\cs_generate_variant:Nn \@@_draw_polar:nw { f }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Point expression arithmetic}
%
% These functions all take point expressions as arguments.
%
% \begin{macro}[EXP]{\draw_point_add:nn, \draw_point_diff:nn}
% \begin{macro}[EXP]{\@@_point_add:nnnn, \@@_point_diff:nnnn}
%   Simple maths once the expansion is done.
%    \begin{macrocode}
\cs_new:Npn \draw_point_add:nn #1#2
  {
    \@@_point_expand:nnN {#1} {#2}
      \@@_point_add:nnnn
  }
\cs_new:Npn \@@_point_add:nnnn #1#2#3#4
  {
    { \fp_to_dim:n { #1 + #3 } }
    { \fp_to_dim:n { #2 + #4 } }
  }
\cs_new:Npn \draw_point_diff:nn #1#2
  {
    \@@_point_expand:nnN {#1} {#2}
      \@@_point_diff:nnnn
  }
\cs_new:Npn \@@_point_diff:nnnn #1#2#3#4
  {
    { \fp_to_dim:n { #3 - #1 } }
    { \fp_to_dim:n { #4 - #2 } }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\draw_point_scale:nn}
% \begin{macro}[EXP]{\@@_point_scale:nnnn}
%   Much the same idea, but as argument |#1| here is a simple floating point
%   expression there is a bit of \enquote{cheating} to reuse the expansion
%   mechanism.
%    \begin{macrocode}
\cs_new:Npn \draw_point_scale:nn #1#2
  {
    \@@_point_expand:nnN { { \fp_eval:n {#1} } { } } {#2}
      \@@_point_scale:nnnn
  }
\cs_new:Npn \@@_point_scale:nnnn #1#2#3#4
  {
    { \fp_to_dim:n { #1 * #3 } }
    { \fp_to_dim:n { #1 * #4 } }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\draw_point_unit_vector:n}
% \begin{macro}[EXP]{\@@_point_unit_vector:n, \@@_point_unit_vector:f}
% \begin{macro}[EXP]{\@@_point_unit_vector:nn, \@@_point_unit_vector:ff}
% \begin{macro}[EXP]{\@@_point_unit_vector:nnn, \@@_point_unit_vector:fnn}
%   Only a single point expression so the expansion is done here. The
%   outcome is the normalised vector from $(0,0)$ in the direction of
%   the point, \emph{i.e.}
%   \[
%     P_{x} = \frac{x}{\sqrt{x^{2} + y^{2}}} \quad
%     P_{y} = \frac{y}{\sqrt{x^{2} + y^{2}}}
%   \]
%   with the obvious optimisation of only evaluating the denominator
%   once.
%    \begin{macrocode}
\cs_new:Npn \draw_point_unit_vector:n #1
  { \@@_point_unit_vector:f {#1} }
\cs_new:Npn \@@_point_unit_vector:n #1
  { \@@_point_unit_vector:ff #1 }
\cs_generate_variant:Nn \@@_point_unit_vector:n { f }
\cs_new:Npn \@@_point_unit_vector:nn #1#2
  {
    \@@_point_unit_vector:fnn
      { \fp_eval:n { sqrt( #1 * #1 + #2 * #2 ) } }
      {#1} {#2}
  }
\cs_generate_variant:Nn \@@_point_unit_vector:nn { ff }
\cs_new:Npn \@@_point_unit_vector:nnn #1#2#3
  {
    { \fp_to_dim:n { #2 / #1 } }
    { \fp_to_dim:n { #3 / #1 } }
  }
\cs_generate_variant:Nn \@@_point_unit_vector:nnn { f }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Intersection calculations}
%
% \begin{macro}[EXP]{\draw_point_intersect_lines:nnnn}
% \begin{macro}[EXP]{\@@_point_intersect_lines:nnnnnn}
% \begin{macro}[EXP]{\@@_point_intersect_lines:nnnnnnnn}
% \begin{macro}[EXP]
%   {\@@_point_intersect_lines_aux:nnnnnn, \@@_point_intersect_lines_aux:ffffff}
% \begin{macro}[EXP]
%   {\@@_point_intersect_lines_aux:fnnnnnn, \@@_point_intersect_lines_aux:fnnnnnn}
%    The intersection point~$P$ between a line joining points $(x_{1}, y_{1})$
%    and $(x_{2}, y_{2})$ with a second line joining points $(x_{3}, y_{3})$
%    and $(x_{4}, y_{4})$ can be calculated using the formulae
%    \[
%      P_{x} =
%          \frac{(x_{1}y_{2} - y_{1}x_{2})(x_{3} - x_{4})
%            - (x_{3}y_{4} - y_{3}x_{4})(x_{1} - x_{2})}
%          {(x_{1} - x_{2})(y_{3} - y_{4}) - (y_{1} - y_{2})(x_{3} - x_{4})}
%    \]
%    and
%    \[
%      P_{y} =
%          \frac{(x_{1}y_{2} - y_{1}x_{2})(y_{3} - y_{5})
%          - (x_{3}y_{4} - y_{3}x_{4})(y_{1} - y_{2})}
%          {(x_{1} - x_{2})(y_{3} - y_{4}) - (y_{1} - y_{2})(x_{3} - x_{4})} 
%    \]
%    The work therefore comes down to expanding the incoming data, then
%    pre-calculating as many parts as possible before the final work to find
%    the intersection. (Expansion and argument re-ordering is much less work
%    than additional floating point calculations.)
%    \begin{macrocode}
\cs_new:Npn \draw_point_intersect_lines:nnnn #1#2#3#4
  {
    \@@_point_expand:nnN {#1} {#2}
      \@@_point_intersect_lines:nnnnnn
      {#3} {#4}
  }
\cs_new:Npn \@@_point_intersect_lines:nnnnnn #1#2#3#4#5#6
  {
    \@@_point_expand:nnN {#5} {#6}
      \@@_point_intersect_lines:nnnnnnnn
      {#1} {#2} {#3} {#4}
  }
%    \end{macrocode}
%   At this stage we have all of the information we need, fully expanded:
%   \begin{enumerate}[label = \#\arabic*, font = \ttfamily]
%     \item $x_{3}$
%     \item $y_{3}$
%     \item $x_{4}$
%     \item $y_{4}$
%     \item $x_{1}$
%     \item $y_{1}$
%     \item $x_{2}$
%     \item $y_{2}$
%   \end{enumerate}
%   so now just have to do all of the calculation.
%    \begin{macrocode}
\cs_new:Npn \@@_point_intersect_lines:nnnnnnnn #1#2#3#4#5#6#7#8
  {
    \@@_point_intersect_lines_aux:ffffff
      { \fp_eval:n { #1 * #4 - #2 * #3 } }
      { \fp_eval:n { #5 * #8 - #6 * #7 } }
      { \fp_eval:n { #1 - #3 } }
      { \fp_eval:n { #5 - #7 } }
      { \fp_eval:n { #2 - #4 } }
      { \fp_eval:n { #6 - #8 } }
  }
\cs_new:Npn \@@_point_intersect_lines_aux:nnnnnn #1#2#3#4#5#6
  {
    \@@_point_intersect_lines_aux:fnnnnnn
      { \fp_eval:n { #4 * #5 - #6 * #3 } }
      {#1} {#2} {#3} {#4} {#5} {#6}
  }
\cs_generate_variant:Nn \@@_point_intersect_lines_aux:nnnnnn { ffffff }
\cs_new:Npn \@@_point_intersect_lines_aux:nnnnnnn #1#2#3#4#5#6#7
  {
    { \fp_to_dim:n { ( #3 * #4 - #2 * #5 ) / #1 } }
    { \fp_to_dim:n { ( #3 * #6 - #2 * #7 ) / #1 } }
  }
\cs_generate_variant:Nn \@@_point_intersect_lines_aux:nnnnnnn { f }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\draw_point_intersect_circles:nnnnn}
% \begin{macro}[EXP]{\@@_point_intersect_circles_auxi:nnnnnnn}
% \begin{macro}[EXP]
%   {
%     \@@_point_intersect_circles_auxii:nnnnnnn,
%     \@@_point_intersect_circles_auxii:ffnnnnn,
%     \@@_point_intersect_circles_auxiii:nnnnnnn,
%     \@@_point_intersect_circles_auxiii:ffnnnnn
%   }
%  \begin{macro}[EXP]
%    {
%      \@@_point_intersect_circles_auxiv:nnnnnnnn,
%      \@@_point_intersect_circles_auxiv:fnnnnnnn
%    }
%  \begin{macro}[EXP]
%    {
%      \@@_point_intersect_circles_auxv:nnnnnnnnn,
%      \@@_point_intersect_circles_auxv:ffnnnnnnn
%    }
%  \begin{macro}[EXP]
%    {
%      \@@_point_intersect_circles_auxvi:nnnnnnnn,
%      \@@_point_intersect_circles_auxvi:fnnnnnnn
%    }
% \begin{macro}[EXP]
%   {
%     \@@_point_intersect_circles_auxvii:nnnnnnn,
%     \@@_point_intersect_circles_auxvii:fffnnnn
%   }
%   Another long expansion chain to get the values in the right places.
%   We have two circles, the first with center $(a, b)$ and radius~$r$,
%   the second with center $(c, d)$ and radius~$s$. We use the intermediate
%   values
%   \begin{align*}
%     e &= c - a \\
%     f &= d - b \\
%     p &= \sqrt{e^{2} + f^{2}} \\
%     k &= \frac{p^{2} + r^{2} - s^{2}}{2p}
%   \end{align*}
%   in either
%   \begin{align*}
%     P_{x} &= a + \frac{ek}{p} + \frac{f}{p}\sqrt{r^{2} - k^{2}} \\
%     P_{y} &= b + \frac{fk}{p} - \frac{e}{p}\sqrt{r^{2} - k^{2}}
%   \end{align*}
%   or
%   \begin{align*}
%     P_{x} &= a + \frac{ek}{p} - \frac{f}{p}\sqrt{r^{2} - k^{2}} \\
%     P_{y} &= b + \frac{fk}{p} + \frac{e}{p}\sqrt{r^{2} - k^{2}}
%   \end{align*}
%   depending on which solution is required. The rest of the work is simply
%   forcing the appropriate expansion and shuffling arguments.
%    \begin{macrocode}
\cs_new:Npn \draw_point_intersect_circles:nnnnn #1#2#3#4#5
  {
    \@@_point_expand:nnN {#1} {#3}
      \@@_point_intersect_circles_auxi:nnnnnnn
      {#2} {#4} {#5}
  }
\cs_new:Npn \@@_point_intersect_circles_auxi:nnnnnnn #1#2#3#4#5#6#7
  {
    \@@_point_intersect_circles_auxii:ffnnnnn
      { \fp_eval:n {#5} } { \fp_eval:n {#6} } {#1} {#2} {#3} {#4} {#7}
  }
%    \end{macrocode}
%   At this stage we have all of the information we need, fully expanded:
%   \begin{enumerate}[label = \#\arabic*, font = \ttfamily]
%     \item $r$
%     \item $s$
%     \item $a$
%     \item $b$
%     \item $c$
%     \item $d$
%     \item $n$
%   \end{enumerate}
%   Once we evaluate $e$ and $f$, the co-ordinate $(c,d)$ is no longer
%   required: handy as we will need various intermediate values in the
%   following.
%    \begin{macrocode}
\cs_new:Npn \@@_point_intersect_circles_auxii:nnnnnnn #1#2#3#4#5#6#7
  {
    \@@_point_intersect_circles_auxiii:ffnnnnn
      { \fp_eval:n { #5 - #3 } }
      { \fp_eval:n { #6 - #4 } }
      {#1} {#2} {#3} {#4} {#7}
  }
\cs_generate_variant:Nn \@@_point_intersect_circles_auxii:nnnnnnn { ff }
\cs_new:Npn \@@_point_intersect_circles_auxiii:nnnnnnn #1#2#3#4#5#6#7
  {
    \@@_point_intersect_circles_auxiv:fnnnnnnn
      { \fp_eval:n { sqrt( #1 * #1 + #2 * #2 ) } }
      {#1} {#2} {#3} {#4} {#5} {#6} {#7}
  }
\cs_generate_variant:Nn \@@_point_intersect_circles_auxiii:nnnnnnn { ff }
%    \end{macrocode}
%   We now have $p$: we pre-calculate $1/p$ as it is needed a few times and
%   is relatively expensive. We also need $r^{2}$ twice so deal with that
%   here too.
%    \begin{macrocode}
\cs_new:Npn \@@_point_intersect_circles_auxiv:nnnnnnnn #1#2#3#4#5#6#7#8
  {
    \@@_point_intersect_circles_auxv:ffnnnnnnn
      { \fp_eval:n { 1 / #1 } }
      { \fp_eval:n { #4 * #4 } }
      {#1} {#2} {#3} {#5} {#6} {#7} {#8}
  }
\cs_generate_variant:Nn \@@_point_intersect_circles_auxiv:nnnnnnnn { f }
\cs_new:Npn \@@_point_intersect_circles_auxv:nnnnnnnnn #1#2#3#4#5#6#7#8#9
  {
    \@@_point_intersect_circles_auxvi:fnnnnnnn
      { \fp_eval:n { 0.5 * #1 * ( #2 + #3 * #3 - #6 * #6 ) } }
      {#1} {#2} {#4} {#5} {#7} {#8} {#9}
  }
\cs_generate_variant:Nn \@@_point_intersect_circles_auxv:nnnnnnnnn { ff }
%    \end{macrocode}
%   We now have all of the intermediate values we require, with one division
%   carried out up-front to avoid doing this expensive step twice:
%   \begin{enumerate}[label = \#\arabic*, font = \ttfamily]
%     \item $k$
%     \item $1/p$
%     \item $r^{2}$
%     \item $e$
%     \item $f$
%     \item $a$
%     \item $b$
%     \item $n$
%   \end{enumerate}
%   There are some final pre-calculations, $k/p$,
%   $\frac{\sqrt{r^{2} - k^{2}}}{p}$ and the usage of $n$, then we
%   can yield a result.
%    \begin{macrocode}
\cs_new:Npn \@@_point_intersect_circles_auxvi:nnnnnnnn #1#2#3#4#5#6#7#8
  {
    \@@_point_intersect_circles_auxvii:fffnnnn
      { \fp_eval:n { #1 * #2 } }
      { \int_if_odd:nTF {#8} { 1 } { -1 } }
      { \fp_eval:n { sqrt ( #3 - #1 * #1 ) * #2 } }
      {#4} {#5} {#6} {#7}
  }
\cs_generate_variant:Nn \@@_point_intersect_circles_auxvi:nnnnnnnn { f }
\cs_new:Npn \@@_point_intersect_circles_auxvii:nnnnnnn #1#2#3#4#5#6#7
  {
    { \fp_to_dim:n { #6 + #4 * #1 +      #2 * #3 * #5 } }
    { \fp_to_dim:n { #7 + #5 * #1 + -1 * #2 * #3 * #4 } }
  }
\cs_generate_variant:Nn \@@_point_intersect_circles_auxvii:nnnnnnn { fff }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Interpolation on a line (vector) or arc}
%
% \begin{macro}[EXP]{\draw_point_interpolate_line:nnn}
% \begin{macro}[EXP]{\@@_point_interpolate_line:nnnnn}
% \begin{macro}[EXP]
%   {
%     \@@_point_interpolate_line_aux:nnnnn,
%     \@@_point_interpolate_line_aux:fnnnn,
%   }
% \begin{macro}[EXP]
%   {
%     \@@_point_interpolate_line_aux:nnnnnn,
%     \@@_point_interpolate_line_aux:fnnnnn,
%   }
%   Simple maths after expansion.
%    \begin{macrocode}
\cs_new:Npn \draw_point_interpolate_line:nnn #1#2#3
  {
    \@@_point_expand:nnN {#2} {#3}
      \@@_point_interpolate_line:nnnnn
      {#1}
  }
\cs_new:Npn \@@_point_interpolate_line:nnnnn #1#2#3#4#5
  {
    \@@_point_interpolate_line_aux:fnnnn { \fp_eval:n {#5} }
      {#1} {#2} {#3} {#4}
  }
\cs_new:Npn \@@_point_interpolate_line_aux:nnnnn #1#2#3#4#5
  {
    \@@_point_interpolate_line_aux:fnnnnn { \fp_eval:n { 1 - #1 } }
      {#1} {#2} {#3} {#4} {#5}
  }
\cs_generate_variant:Nn \@@_point_interpolate_line_aux:nnnnn { f }
\cs_new:Npn \@@_point_interpolate_line_aux:nnnnnn #1#2#3#4#5#6
  {
    { \fp_to_dim:n { #2 * #3 + #1 * #5 } }
    { \fp_to_dim:n { #2 * #4 + #1 * #6 } }
  }
\cs_generate_variant:Nn \@@_point_interpolate_line_aux:nnnnnn { f }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\draw_point_interpolate_distance:nnn}
% \begin{macro}[EXP]{\@@_point_interpolate_distance:nnnnn}
% \begin{macro}[EXP]
%   {
%     \@@_point_interpolate_distance_aux:nnnnnnn,
%     \@@_point_interpolate_distance_aux:nnnnnnn,
%   }
% \begin{macro}[EXP]
%   {
%     \@@_point_interpolate_distance_aux:nnnnnn,
%     \@@_point_interpolate_distance_aux:fnnnnn,
%   }
%   Same idea but using the normalised length to obtain the scale factor.
%    \begin{macrocode}
\cs_new:Npn \draw_point_interpolate_distance:nnn #1#2#3
  {
    \@@_point_expand:nnN {#2} {#3}
      \@@_point_interpolate_distance:nnnnn
      {#1}
  }
\cs_new:Npn \@@_point_interpolate_distance:nnnnn #1#2#3#4#5
  {
    \@@_point_interpolate_distance_aux:nnnnnnn
      { \fp_eval:n { #3 - #1 } }
      { \fp_eval:n { #4 - #2 } }
      {#1} {#2} {#3} {#4} {#5}
  }
\cs_new:Npn \@@_point_interpolate_distance_aux:nnnnnnn #1#2#3#4#5#6#7
  {
    \@@_point_interpolate_distance_aux:fnnnn
      { \fp_eval:n { (#7) / sqrt ( #1 * #1 + #2 * #2 ) } }
      {#3} {#4} {#5} {#6}
  }
\cs_generate_variant:Nn \@@_point_interpolate_distance_aux:nnnnnnn { ff }
\cs_new:Npn \@@_point_interpolate_distance_aux:nnnnn #1#2#3#4#5
  {
    { \fp_to_dim:n { #2 + #1 * #4 } }
    { \fp_to_dim:n { #3 + #1 * #5 } }
  }
\cs_generate_variant:Nn \@@_point_interpolate_distance_aux:nnnnn { f }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\draw_point_interpolate_arc:nnnnnn}
% \begin{macro}[EXP]{\@@_point_interpolate_arc_auxi:nnnnnnnn}
% \begin{macro}[EXP]{\@@_point_interpolate_arc_auxii:nnnnnnnn}
% \begin{macro}[EXP]
%   {
%     \@@_point_interpolate_arc_auxiii:nnnnnnnnn,
%     \@@_point_interpolate_arc_auxiii:fnnnnnnnn
%   }
% \begin{macro}[EXP]
%   {
%     \@@_point_interpolate_arc_auxiv:nnnnnnn,
%     \@@_point_interpolate_arc_auxiv:fnnnnnn
%   }
% \begin{macro}[EXP]
%   {
%     \@@_point_interpolate_arc_auxv:nnnnnnnn,
%     \@@_point_interpolate_arc_auxv:ffnnnnnn
%   }
%   Finding a point on an ellipse arc is relatively easy: find the correct
%   angle between the two given, use the sine and cosine of that angle,
%   apply to the axes. We just have to work a bit with the co-ordinate
%   expansion.
%    \begin{macrocode}
\cs_new:Npn \draw_point_interpolate_arc:nnnnnn #1#2#3#4#5#6
  {
    \@@_point_expand:nnN {#2} {#3}
      \@@_point_interpolate_arc_auxi:nnnnnnnn
      {#1} {#4} {#5} {#6}
  }
\cs_new:Npn \@@_point_interpolate_arc_auxi:nnnnnnnn #1#2#3#4#5#6#7#8
  {
    \@@_point_expand:nnN {#6} { { } { } }
      \@@_point_interpolate_arc_auxii:nnnnnnnn
      {#5} { {#1} {#2} {#3} {#4} } {#7} {#8}
  }
\cs_new:Npn \@@_point_interpolate_arc_auxii:nnnnnnnn #1#2#3#4#5#6#7#8
  {
    \@@_point_interpolate_arc_auxiii:fnnnnnnnn
      { \fp_eval:n {#5} } {#7} {#8} #6 {#1} {#2}
  }
%    \end{macrocode}
%   At this stage, the three co-ordinate pairs are fully expanded but somewhat
%   re-ordered:
%   \begin{enumerate}[label = \#\arabic*, font = \ttfamily]
%     \item $p$
%     \item $\theta_{1}$
%     \item $\theta_{2}$
%     \item $x_{c}$
%     \item $y_{c}$
%     \item $x_{a1}$
%     \item $y_{a1}$
%     \item $x_{a2}$
%     \item $y_{a2}$
%   \end{enumerate}
%   We are now in a position to find the target angle, and from that
%   the sine and cosine required.
%    \begin{macrocode}
\cs_new:Npn \@@_point_interpolate_arc_auxiii:nnnnnnnnn #1#2#3#4#5#6#7#8#9
  {
    \@@_point_interpolate_arc_auxiv:fnnnnnn
      { \fp_eval:n { #1 * (#3) + ( 1 - #1 ) * (#2) } }
      {#4} {#5} {#6} {#7} {#8} {#9}
  }
\cs_generate_variant:Nn \@@_point_interpolate_arc_auxiii:nnnnnnnnn { f }
\cs_new:Npn \@@_point_interpolate_arc_auxiv:nnnnnnn #1#2#3#4#5#6#7
  {
    \@@_point_interpolate_arc_auxv:ffnnnnnn
      { \fp_eval:n { cosd (#1) } }
      { \fp_eval:n { sind (#1) } }
      {#2} {#3} {#4} {#5} {#6} {#7}
  }
\cs_generate_variant:Nn \@@_point_interpolate_arc_auxiv:nnnnnnn { f }
\cs_new:Npn \@@_point_interpolate_arc_auxv:nnnnnnnn #1#2#3#4#5#6#7#8
  {
    { \fp_to_dim:n { #3 + #1 * #5 + #2 * #7 } }
    { \fp_to_dim:n { #4 + #1 * #6 + #2 * #8 } }
  }
\cs_generate_variant:Nn \@@_point_interpolate_arc_auxv:nnnnnnnn { ff }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\draw_point_interpolate_curve:nnnnn}
% \begin{macro}[EXP]{\draw_point_interpolate_curve_auxi:nnnnnnn}
% \begin{macro}[EXP]{\draw_point_interpolate_curve_auxii:nnnnnnnnn}
% \begin{macro}[EXP]
%   {
%     \draw_point_interpolate_curve_auxiii:nnnnnnnnn,
%     \draw_point_interpolate_curve_auxiii:fnnnnnnnn,
%   }
% \begin{macro}[EXP]
%   {
%     \draw_point_interpolate_curve_auxiv:nnnnnn,
%     \draw_point_interpolate_curve_auxiv:fnnnnn,
%   }
% \begin{macro}[EXP]{\draw_point_interpolate_curve_auxv:nnnnnn}
% \begin{macro}[EXP]
%   {
%     \draw_point_interpolate_curve_auxvi:nnw,
%     \draw_point_interpolate_curve_auxvi:ffw,
%   }
% \begin{macro}[EXP]{\draw_point_interpolate_curve_auxvii:n}
% \begin{macro}[EXP]{\draw_point_interpolate_curve_auxviii:nnnnnnnn}
% \begin{macro}[EXP]
%   {
%     \draw_point_interpolate_curve_auxix:nnnnnn,
%     \draw_point_interpolate_curve_auxix:ffnnnn,
%   }
%   Here we start with a proportion of the curve ($p$) and four points
%   \begin{enumerate}
%     \item The initial point $(x_{1},y_{1})$
%     \item The first control point $(x_{2},y_{2})$
%     \item The second control point $(x_{3},y_{3})$
%     \item The final point $(x_{4},y_{4})$
%   \end{enumerate}
%   The first phase is to expand out all of these values.
%    \begin{macrocode}
\cs_new:Npn \draw_point_interpolate_curve:nnnnnn #1#2#3#4#5
  {
    \@@_point_expand:nnN {#2} {#3}
      \@@_point_interpolate_curve_auxi:nnnnnnn
      {#1} {#4} {#5}
  }
\cs_new:Npn \@@_point_interpolate_curve_auxi:nnnnnnn #1#2#3#4#5#6#7
  {
    \@@_point_expand:nnN {#6} {#7}
      \@@_point_interpolate_curve_auxii:nnnnnnnnn
      {#5} {#1} {#2} {#3} {#4}
  }
\cs_new:Npn \@@_point_interpolate_curve_auxii:nnnnnnnnn #1#2#3#4#5#6#7#8#9
  {
    \@@_point_interpolate_curve_auxiii:fnnnnnnnn
      { \fp_eval:n {#5} }
      {#6} {#7} {#8} {#9} {#1} {#2} {#3} {#4}
  }
%    \end{macrocode}
%   At this stage, everything is fully expanded and back in the input order.
%   The approach to finding the required point is iterative. We carry out
%   three phases. In phase one, we need all of the input co-ordinates
%   \begin{align*}
%     x_{1}' &= (1 - p)x_{1} + px_{2} \\
%     y_{1}' &= (1 - p)y_{1} + py_{2} \\
%     x_{2}' &= (1 - p)x_{2} + px_{3} \\
%     y_{2}' &= (1 - p)y_{2} + py_{3} \\
%     x_{3}' &= (1 - p)x_{3} + px_{4} \\
%     y_{3}' &= (1 - p)y_{3} + py_{4}
%   \end{align*}
%   In the second stage, we can drop the final point
%   \begin{align*}
%     x_{1}'' &= (1 - p)x_{1}' + px_{2}' \\
%     y_{1}'' &= (1 - p)y_{1}' + py_{2}' \\
%     x_{2}'' &= (1 - p)x_{2}' + px_{3}' \\
%     y_{2}'' &= (1 - p)y_{2}' + py_{3}'
%   \end{align*}
%   and for the final stage only need one set of calculations
%   \begin{align*}
%     P_{x} &= (1 - p)x_{1}'' + px_{2}'' \\
%     P_{y} &= (1 - p)y_{1}'' + py_{2}''
%   \end{align*}
%   Of course, this does mean a lot of calculations and expansion!
%    \begin{macrocode}
\cs_new:Npn \@@_point_interpolate_curve_auxiii:nnnnnnnnn #1#2#3#4#5#6#7#8#9
  {
    \@@_point_interpolate_curve_auxiv:fnnnnn
      { \fp_eval:n { 1 - #1 } }
      {#1}
      { {#2} {#3} } { {#4} {#5} } { {#6} {#7} } { {#8} {#9} }
  }
\cs_generate_variant:Nn \@@_point_interpolate_curve_auxiii:nnnnnnnnn { f }
%    \begin{macrocode}
%   We need to do the first cycle, but haven't got enough arguments to keep
%   everything in play at once. So her ewe use a but of argument re-ordering
%   and a single auxiliary to get the job done. 
%    \begin{macrocode}
\cs_new:Npn \@@_point_interpolate_curve_auxiv:nnnnnn #1#2#3#4#5#6
  {
    \@@_point_interpolate_curve_auxv:nnnnnn {#1} {#2} #3 #4
    \@@_point_interpolate_curve_auxv:nnnnnn {#1} {#2} #4 #5
    \@@_point_interpolate_curve_auxv:nnnnnn {#1} {#2} #5 #6
    \prg_do_nothing:
    \@@_point_interpolate_curve_auxvii:n { {#1} {#2} }
  }
\cs_generate_variant:Nn \@@_point_interpolate_curve_auxiv:nnnnnn { f }
\cs_new:Npn \@@_point_interpolate_curve_auxv:nnnnnn #1#2#3#4#5#6
  {
    \@@_point_interpolate_curve_auxvi:ffw
      { \fp_eval:n { #1 * #3 + #2 * #5 } }
      { \fp_eval:n { #1 * #4 + #2 * #6 } }
  }
\cs_new:Npn \@@_point_interpolate_curve_auxvi:nnw
  #1#2#3 \prg_do_nothing: #4#5
  {
    #3
    \prg_do_nothing:
    #4 { #5 {#1} {#2} }
  }
\cs_generate_variant:Nn \@@_point_interpolate_curve_auxvi:nnw { ff }
%    \begin{macrocode}
%   Get the arguments back into the right places and to the second and
%   third cycles directly.
%    \begin{macrocode}
\cs_new:Npn \@@_point_interpolate_curve_auxvii:n #1
  { \@@_point_interpolate_curve_auxviii:nnnnnnnn #1 }
\cs_new:Npn \@@_point_interpolate_curve_auxviii:nnnnnnnn #1#2#3#4#5#6#7#8
  {
    \@@_point_interpolate_curve_auxix:ffffnn
      { \fp_eval:n { #1 * #5 + #2 * #3 } }
      { \fp_eval:n { #1 * #6 + #2 * #4 } }
      { \fp_eval:n { #1 * #7 + #2 * #5 } }
      { \fp_eval:n { #1 * #8 + #2 * #6 } }
      {#1} {#2}
  }
\cs_new:Npn \@@_point_interpolate_curve_auxix:nnnnnn #1#2#3#4#5#6
  {
    { \fp_to_dim:n { #5 * #3 + #6 * #1 } }
    { \fp_to_dim:n { #5 * #4 + #6 * #2 } }
  }
\cs_generate_variant:Nn \@@_point_interpolate_curve_auxix:nnnnnn { ffff }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Vector support}
%
% As well as co-ordinates relative to the drawing 
%
% \begin{variable}
%   {
%     \l_@@_xvec_x_dim,
%     \l_@@_xvec_y_dim,
%     \l_@@_yvec_x_dim,
%     \l_@@_yvec_y_dim,
%     \l_@@_zvec_x_dim,
%     \l_@@_zvec_y_dim
%   }
%   Base vectors to map to the underlying two-dimensional drawing space.
%    \begin{macrocode}
\dim_new:N \l_@@_xvec_x_dim
\dim_new:N \l_@@_xvec_y_dim
\dim_new:N \l_@@_yvec_x_dim
\dim_new:N \l_@@_yvec_y_dim
\dim_new:N \l_@@_zvec_x_dim
\dim_new:N \l_@@_zvec_y_dim
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\draw_set_xvec:n, \draw_set_yvec:n, \draw_set_zvec:n}
% \begin{macro}{\@@_set_vec:nn}
% \begin{macro}{\@@_set_vec:nnn}
%   Calculate the underlying position and store it.
%    \begin{macrocode}
\cs_new_protected:Npn \draw_set_xvec:n #1
  { \@@_set_vec:nn { x } {#1} }
\cs_new_protected:Npn \draw_set_yvec:n #1
  { \@@_set_vec:nn { y } {#1} }
\cs_new_protected:Npn \draw_set_zvec:n #1
  { \@@_set_vec:nn { z } {#1} }
\cs_new_protected:Npn \@@_set_vec:nn #1#2
  {
    \@@_point_process:nn {#2} { \@@_set_vec:nnn {#1} }
  }
\cs_new_protected:Npn \@@_set_vec:nnn #1#2#3
  {
    \dim_set:cn { l_@@_ #1 vec_x_dim } {#2}
    \dim_set:cn { l_@@_ #1 vec_y_dim } {#3}
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% Initialise the vectors.
%    \begin{macrocode}
\draw_set_xvec:n { { 1cm } { 0cm } }
\draw_set_yvec:n { { 0cm } { 1cm } }
\draw_set_zvec:n { { -0.385cm } { -0.385cm } }
%    \end{macrocode}
%
% \begin{macro}[EXP]{\draw_point_vec_coord:nn}
% \begin{macro}[EXP]{\@@_point_vec_coord:nn, \@@_point_vec_coord:ff}
% \begin{macro}[EXP]{\draw_point_vec_coord:nnn}
% \begin{macro}[EXP]{\@@_point_vec_coord:nnn, \@@_point_vec_coord:fff}
%   Force a single evaluation of each factor, then use these to work out the
%   underlying point.
%    \begin{macrocode}
\cs_new:Npn \draw_point_vec_coord:nn #1#2
  { \@@_point_vec_coord:ff { \fp_eval:n {#1} } { \fp_eval:n {#2} } }
\cs_new:Npn \@@_point_vec_coord:nn #1#2
  {
    {
      \fp_to_dim:n
        { #1 * \l_@@_xvec_x_dim + #2 * \l_@@_yvec_x_dim }
    }
    {
      \fp_to_dim:n
        { #1 * \l_@@_xvec_y_dim + #2 * \l_@@_yvec_y_dim }
    }
  }
\cs_generate_variant:Nn \@@_point_vec_coord:nn { ff }
\cs_new:Npn \draw_point_vec_coord:nnn #1#2#3
  {
    \@@_point_vec_coord:fff
      { \fp_eval:n {#1} } { \fp_eval:n {#2} } { \fp_eval:n {#3} }
  }
\cs_new:Npn \@@_point_vec_coord:nnn #1#2#3
  {
    {
      \fp_to_dim:n
        { 
            #1 * \l_@@_xvec_x_dim
          + #2 * \l_@@_yvec_x_dim
          + #3 * \l_@@_zvec_x_dim
        }
    }
    {
      \fp_to_dim:n
        {
            #1 * \l_@@_xvec_y_dim
          + #2 * \l_@@_yvec_y_dim
          + #3 * \l_@@_zvec_y_dim
        }
    }
  }
\cs_generate_variant:Nn \@@_point_vec_coord:nnn { fff }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\draw_point_vec_polar:nn}
% \begin{macro}[EXP]{\@@_point_vec_polar:nn, \@@_point_vec_polar:ff}
%   Much the same as the core polar approach.
%    \begin{macrocode}
\cs_new:Npn \draw_point_vec_polar:nn #1#2
  { \@@_draw_vec_polar:fw { \fp_eval:n {#1} } #2 ~ and ~ #2 ~ \q_stop }
\cs_new:Npn \@@_draw_vec_polar:nw #1#2 ~ and ~ #3 ~ #4 \q_stop
  {
    { \fp_to_dim:n { cosd(#1) * (#2) * \l_@@_xvec_x_dim } }
    { \fp_to_dim:n { sind(#1) * (#3) * \l_@@_yvec_y_dim } }
  }
\cs_generate_variant:Nn \@@_draw_vec_polar:nw { f }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
