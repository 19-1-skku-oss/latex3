% \iffalse meta-comment
%
%% File: l3drivers-pdf.dtx
%
% Copyright (C) 2011-2019 The LaTeX3 Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "l3kernel bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/latex3
%
% for those people who are interested.
%
%<*driver>
\documentclass[full,kernel]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \textsf{l3drivers-pdf} package\\ Driver PDF features^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released 2019-04-06}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3drivers-pdf} Implementation}
%
%    \begin{macrocode}
%<*initex|package>
%<@@=driver>
%    \end{macrocode}
%
% \subsection{\texttt{dvips} driver}
%
%    \begin{macrocode}
%<*dvips>
%    \end{macrocode}
%
% \subsubsection{Annotations}
%
% \subsubsection{Objects}
%
% \begin{variable}{\g_@@_pdf_object_int, \g_@@_pdf_object_prop}
%   For tracking objects to allow finalisation.
%    \begin{macrocode}
\int_new:N \g_@@_pdf_object_int
\prop_new:N \g_@@_pdf_object_prop
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\driver_pdf_object_new:nn}
% \begin{macro}[EXP]{\driver_pdf_object_ref:n}
%   Tracking objects is similar to \texttt{dvipdfmx}.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_object_new:nn #1#2
  {
    \int_gincr:N \g_@@_pdf_object_int
    \int_const:cn
      { g_@@_pdf_object_ \tl_to_str:n {#1} _int }
      { \g_@@_pdf_object_int }
    \prop_gput:Nnn \g_@@_pdf_object_prop {#1} {#2}
  }
\cs_new:Npn \driver_pdf_object_ref:n #1
  { { l3obj \int_use:c { g_@@_pdf_object_ \tl_to_str:n {#1} _int } } }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\driver_pdf_object_write:nn}
% \begin{macro}
%   {
%     \@@_pdf_object_write_array:nn ,
%     \@@_pdf_object_write_dict:nn  ,
%     \@@_pdf_object_write_stream:nn
%   }
% \begin{macro}{\@@_pdf_object_write_stream:nnn}
%   This is where we choose the actual type: some work to get things
%   right.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_object_write:nn #1#2
  {
    \@@_literal_postscript:x
      {
        mark ~ /_objdef ~ \driver_pdf_object_ref:n {#1} ~
        /type
        \str_case_e:nn
          { \prop_item:Nn \g_@@_pdf_object_prop {#1} }
          {
            { array }   { /array }
            { dict }    { /dict }
            { fstream } { /stream }
            { stream }  { /stream }
          }
        /OBJ ~ pdfmark
      }
    \use:c
      { @@_pdf_object_write_ \prop_item:Nn \g_@@_pdf_object_prop {#1} :nn }
      {#1} {#2}
  }
\cs_new_protected:Npn \@@_pdf_object_write_array:nn #1#2
  {
    \@@_literal_postscript:x
      {
        mark ~ \driver_pdf_object_ref:n {#1} ~
          [ ~ \exp_not:n {#2} ~ ] ~ /PUTINTERVAL ~ pdfmark
      }
  }
\cs_new_protected:Npn \@@_pdf_object_write_dict:nn #1#2
  {
    \@@_literal_postscript:x
      {
        mark ~ \driver_pdf_object_ref:n {#1} ~
          << ~ \exp_not:n {#2} ~ >> ~ /PUT ~ pdfmark
      }
  }
\cs_new_protected:Npn \@@_pdf_object_write_stream:nn #1#2
  {
    \exp_args:Nx
      \@@_pdf_object_write_stream:nnn
        { \driver_pdf_object_ref:n {#1} }
        #2
  }
\cs_new_protected:Npn \@@_pdf_object_write_stream:nnn #1#2#3
  {
    \@@_literal_postscript:n
      {
        [nobreak] ~
        mark ~ #1 ~ ( #3 ) ~ /PUT ~ pdfmark ~
        mark ~ #1 ~ << #2 >> ~ /PUT ~ pdfmark
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsubsection{Structure}
%
% \begin{macro}{\driver_pdf_compresslevel:n}
% \begin{macro}{\driver_pdf_objects_enable:, \driver_pdf_objects_disable:}
%   These are all no-ops.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_compresslevel:n #1 { }
\cs_new_protected:Npn \driver_pdf_objects_enable: { }
\cs_new_protected:Npn \driver_pdf_objects_disable: { }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\driver_pdf_version_minor:}
%   Data not available!
%    \begin{macrocode}
\cs_new:Npn \driver_pdf_version_minor: { 0 }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</dvips>
%    \end{macrocode}
%
% \subsection{\texttt{pdfmode} driver}
%
%    \begin{macrocode}
%<*pdfmode>
%    \end{macrocode}
%
% \subsubsection{Annotations}
%
% \begin{macro}{\driver_link_begin_goto:nn, \driver_link_begin_user:nn}
% \begin{macro}{\@@_link_begin:nnn}
%   Links are all created using the same internals.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_link_begin_goto:nn #1#2
  { \@@_link_begin:nnn {#1} { goto~name } {#2} }
\cs_new_protected:Npn \driver_link_begin_user:nn #1#2
  { \@@_link_begin:nnn {#1} { user } {#2} }
\cs_new_protected:Npx \@@_link_begin:nnn #1#2#3
  {
    \cs_if_exist:NTF \tex_pdfextension:D
      { \tex_pdfextension:D startlink ~ }
      { \tex_pdfstartlink:D }
      attr {#1}
      \exp_not:N \tl_if_blank:nF {#2}
        { ~ #2 {#3} }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\driver_link_end:}
%   Ending a link is easy.
%    \begin{macrocode}
\cs_new_protected:Npx \driver_link_end:
  {
    \cs_if_exist:NTF \tex_pdfextension:D
      { \tex_pdfextension:D endlink }
      { \tex_pdfendlink:D }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Objects}
%
% \begin{variable}{\g_@@_pdf_object_prop}
%   For tracking objects to allow finalisation.
%    \begin{macrocode}
\prop_new:N \g_@@_pdf_object_prop
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\driver_pdf_object_new:nn}
% \begin{macro}[EXP]{\driver_pdf_object_ref:n}
%   Declaring objects means reserving at the PDF level plus starting
%   tracking.
%    \begin{macrocode}
\group_begin:
  \cs_set_protected:Npn \@@_tmp:w #1#2
    {
      \cs_new_protected:Npx \driver_pdf_object_new:nn ##1##2
        {
          #1 reserveobjnum ~
          \int_const:cn
            { g_@@_pdf_object_ \exp_not:N \tl_to_str:n {##1} _int }
            {#2}
          \prop_gput:Nnn \exp_not:N \g_@@_pdf_object_prop {##1} {##2}
        }
    }
  \cs_if_exist:NTF \tex_pdfextension:D
    {
      \@@_tmp:w
        { \tex_pdfextension:D obj ~ }
        { \tex_pdffeedback:D lastobj \scan_stop: }
    }
    { \@@_tmp:w { \tex_pdfobj:D } { \tex_pdflastobj:D } }
\group_end:
\cs_new:Npn \driver_pdf_object_ref:n #1
  { \int_use:c { g_@@_pdf_object_ \tl_to_str:n {#1} _int } ~ 0 ~ R }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\driver_pdf_object_write:nn}
% \begin{macro}[EXP]{\@@_exp_not_i:nn, \@@_exp_not_ii:nn}
%   Writing the data needs a little information about the structure of the
%   object.
%    \begin{macrocode}
\group_begin:
  \cs_set_protected:Npn \@@_tmp:w #1
    {
      \cs_new_protected:Npn \driver_pdf_object_write:nn ##1##2
        {
          \tex_immediate:D #1 useobjnum ~
          \int_use:c
            { g_@@_pdf_object_ \tl_to_str:n {##1} _int }
            \str_case_e:nn
              { \prop_item:Nn \g_@@_pdf_object_prop {##1} }
              {
                { array } { { [ ~ \exp_not:n {##2} ~ ] } }
                { dict }  { { << ~ \exp_not:n {##2} ~ >> } }
                { fstream }
                  {
                    stream ~ attr ~ { \@@_exp_not_i:nn ##2 } ~
                      file ~ { \@@_exp_not_ii:nn ##2 }
                  }
                { stream }
                  {
                    stream ~ attr ~ { \@@_exp_not_i:nn ##2 } ~ 
                      { \@@_exp_not_ii:nn ##2 }
                  }
              }
        }
    }
  \cs_if_exist:NTF \tex_pdfextension:D
    { \@@_tmp:w { \tex_pdfextension:D obj ~ } }
    { \@@_tmp:w { \tex_pdfobj:D } }
\group_end:
\cs_new:Npn \@@_exp_not_i:nn #1#2 { \exp_not:n {#1} }
\cs_new:Npn \@@_exp_not_ii:nn #1#2 { \exp_not:n {#2} }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsubsection{Structure}
%
% \begin{macro}{\driver_pdf_compresslevel:n}
% \begin{macro}{\driver_pdf_objects_enable:, \driver_pdf_objects_disable:}
% \begin{macro}{\@@_pdf_objectlevel:n}
%   Simply pass data to the engine.
%    \begin{macrocode}
\cs_new_protected:Npx \driver_pdf_compresslevel:n #1
  {
    \cs_if_exist:NTF \tex_pdfcompresslevel:D
      { \tex_pdfcompresslevel:D }
      { \tex_pdfvariable:D compresslevel }
      \exp_not:N \int_value:w \exp_not:N \int_eval:n {#1} \scan_stop:
  }
\cs_new_protected:Npn \driver_pdf_objects_enable:
  { \@@_pdf_objectlevel:n { 2 } }
\cs_new_protected:Npn \driver_pdf_objects_disable:
  { \@@_pdf_objectlevel:n { 0 } }
\cs_new_protected:Npx \@@_pdf_objectlevel:n #1
  {
    \cs_if_exist:NTF \tex_pdfobjcompresslevel:D
      { \tex_pdfobjcompresslevel:D }
      { \tex_pdfvariable:D objcompresslevel }
      #1 \scan_stop:
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\driver_pdf_version_minor:}
%    \begin{macrocode}
\cs_new:Npx \driver_pdf_version_minor:
  {
    \cs_if_exist:NTF \tex_pdfminorversion:D
      { \exp_not:N \tex_pdfminorversion:D }
      { \tex_pdfvariable:D minorversion }
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</pdfmode>
%    \end{macrocode}
%
% \subsection{\texttt{dvipdfmx} driver}
%
%    \begin{macrocode}
%<*dvipdfmx|xdvipdfmx>
%    \end{macrocode}
%
% \begin{macro}{\@@_pdf:n, \@@_pdf:x}
%   A generic function for the driver PDF specials: used where we can.
%    \begin{macrocode}
\cs_new_protected:Npx \@@_pdf:n #1
  { \@@_literal:n { pdf: #1 } }
\cs_generate_variant:Nn \@@_pdf:n { x }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Annotations}
%
% \begin{macro}{\driver_link_begin_goto:nn, \driver_link_begin_user:nn}
% \begin{macro}{\@@_link_begin:nnn}
%    \begin{macrocode}
\cs_new_protected:Npn \driver_link_begin_goto:nn #1#2
  { \@@_pdf_startlink:nnn {#1} { /GoTo } {#2} }
\cs_new_protected:Npn \driver_link_begin_user:nn #1#2
  { \@@_pdf_startlink:nnn {#1} { } {#2} }
\cs_new_protected:Npn \@@_link_begin:nnn #1#2#3
  {
    \@@_pdf:n
      {
         bann
         <<
           /Type /Annot
           /Subtype /Link
           #1 ~ #2 ~ #3
         >>
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\driver_link_end:}
%    \begin{macrocode}
\cs_new_protected:Npx \driver_link_end:
  { \@@_pdf:n { eann } }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Objects}
%
% \begin{variable}{\g_@@_pdf_object_int, \g_@@_pdf_object_prop}
%   For tracking objects to allow finalisation.
%    \begin{macrocode}
\int_new:N \g_@@_pdf_object_int
\prop_new:N \g_@@_pdf_object_prop
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\driver_pdf_object_new:nn}
% \begin{macro}[EXP]{\driver_pdf_object_ref:n}
%   Objects are tracked at the macro level, but we don't have to do anything
%   at this stage.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_object_new:nn #1#2
  {
    \int_gincr:N \g_@@_pdf_object_int
    \int_const:cn
      { g_@@_pdf_object_ \tl_to_str:n {#1} _int }
      { \g_@@_pdf_object_int }
    \prop_gput:Nnn \g_@@_pdf_object_prop {#1} {#2}
  }
\cs_new:Npn \driver_pdf_object_ref:n #1
  { @l3obj \int_use:c { g_@@_pdf_object_ \tl_to_str:n {#1} _int } }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\driver_pdf_object_write:nn}
% \begin{macro}{\@@_pdf_object_write:nnn}
% \begin{macro}
%   {
%     \@@_pdf_object_write_array:nn   ,
%     \@@_pdf_object_write_dict:nn    ,
%     \@@_pdf_object_write_fstream:nn ,
%     \@@_pdf_object_write_stream:nn
%   }
% \begin{macro}{\@@_pdf_object_write_stream:nnnn}
%   This is where we choose the actual type.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_object_write:nn #1#2
  {
    \exp_args:Nx \@@_pdf_object_write:nnn
      { \prop_item:Nn \g_@@_pdf_object_prop {#1} } {#1} {#2}
  }
\cs_new_protected:Npn \@@_pdf_object_write:nnn #1#2#3
  { \use:c { @@_pdf_object_write_ #1 :nn } {#2} {#3} }
\cs_new_protected:Npn \@@_pdf_object_write_array:nn #1#2
  {
    \@@_pdf:x
      {
        obj ~ \driver_pdf_object_ref:n {#1} ~
          [ ~ \exp_not:n {#2} ~ ]
      }
  }
\cs_new_protected:Npn \@@_pdf_object_write_dict:nn #1#2
  {
    \@@_pdf:x
      {
        obj ~ \driver_pdf_object_ref:n {#1} ~
          << ~ \exp_not:n {#2} ~ >>
      }
  }
\cs_new_protected:Npn \@@_pdf_object_write_fstream:nn #1#2
  { \@@_pdf_object_write_stream:nnnn { f } {#1} #2 }
\cs_new_protected:Npn \@@_pdf_object_write_stream:nn #1#2
  { \@@_pdf_object_write_stream:nnnn { } {#1} #2 }
\cs_new_protected:Npn \@@_pdf_object_write_stream:nnnn #1#2#3#4
  {
    \@@_pdf:x
      {
        #1 stream ~ \driver_pdf_object_ref:n {#2} ~
          ( \exp_not:n {#4} ) ~ << \exp_not:n {#3} >>
        
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsubsection{Structure}
%
% \begin{macro}{\driver_pdf_compresslevel:n}
% \begin{macro}{\driver_pdf_objects_enable:, \driver_pdf_objects_disable:}
%   Pass data to the driver: these are a one-shot.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_compresslevel:n #1
  { \@@_literal:x { dvipdfmx:config~z~ \int_eval:n {#1} } }
\cs_new_protected:Npn \driver_pdf_objects_enable: { }
\cs_new_protected:Npn \driver_pdf_objects_disable:
  { \@@_literal:n { dvipdfmx:config~C~0x40 } }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\driver_pdf_version_minor:}
%   Data not available!
%    \begin{macrocode}
\cs_new:Npn \driver_pdf_version_minor: { 0 }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</dvipdfmx|xdvipdfmx>
%    \end{macrocode}
%
% \subsection{\texttt{dvisvgm} driver}
%
%    \begin{macrocode}
%<*dvisvgm>
%    \end{macrocode}
%
% \subsubsection{Objects}
%
% \begin{macro}{\driver_pdf_object_new:nn}
% \begin{macro}[EXP]{\driver_pdf_object_ref:n}
% \begin{macro}{\driver_pdf_object_write:nn}
%   All no-ops here.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_object_new:nn #1#2 { }
\cs_new:Npn \driver_pdf_object_ref:n #1 { }
\cs_new_protected:Npn \driver_pdf_object_write:nn #1#2 { }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsubsection{Structure}
%
% \begin{macro}{\driver_pdf_compresslevel:n}
% \begin{macro}{\driver_pdf_objects_enable:, \driver_pdf_objects_disable:}
%   These are all no-ops.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_compresslevel:n #1 { }
\cs_new_protected:Npn \driver_pdf_objects_enable: { }
\cs_new_protected:Npn \driver_pdf_objects_disable: { }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\driver_pdf_version_minor:}
%   Data not available!
%    \begin{macrocode}
\cs_new:Npn \driver_pdf_version_minor: { 0 }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</dvisvgm>
%    \end{macrocode}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
