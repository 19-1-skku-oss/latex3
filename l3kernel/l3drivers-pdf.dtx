% \iffalse meta-comment
%
%% File: l3drivers-pdf.dtx
%
% Copyright (C) 2011-2019 The LaTeX3 Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "l3kernel bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/latex3
%
% for those people who are interested.
%
%<*driver>
\documentclass[full,kernel]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \textsf{l3drivers-pdf} package\\ Driver PDF features^^A
% }
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released 2019-04-06}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3drivers-pdf} Implementation}
%
%    \begin{macrocode}
%<*initex|package>
%<@@=driver>
%    \end{macrocode}
%
% \subsection{\texttt{dvips} driver}
%
%    \begin{macrocode}
%<*dvips>
%    \end{macrocode}
%
% \subsubsection{Objects}
%
% \begin{variable}{\g_@@_pdf_object_int, \g_@@_pdf_object_prop}
%   For tracking objects to allow finalisation.
%    \begin{macrocode}
\int_new:N \g_@@_pdf_object_int
\prop_new:N \g_@@_pdf_object_prop
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\driver_pdf_object_new:nn}
% \begin{macro}[EXP]{\driver_pdf_object_ref:n}
%   Tracking objects is similar to \texttt{dvipdfmx}.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_object_new:nn #1#2
  {
    \int_gincr:N \g_@@_pdf_object_int
    \int_const:cn
      { g_@@_pdf_object_ \tl_to_str:n {#1} _int }
      { \g_@@_pdf_object_int }
    \prop_gput:Nnn \g_@@_pdf_object_prop {#1} {#2}
  }
\cs_new:Npn \driver_pdf_object_ref:n #1
  { { l3obj \int_use:c { g_@@_pdf_object_ \tl_to_str:n {#1} _int } } }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\driver_pdf_object_write:nn}
% \begin{macro}
%   {
%     \@@_pdf_object_write_array:nn ,
%     \@@_pdf_object_write_dict:nn  ,
%     \@@_pdf_object_write_stream:nn
%   }
% \begin{macro}{\@@_pdf_object_write_stream:nnn}
%   This is where we choose the actual type: some work to get things
%   right.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_object_write:nn #1#2
  {
    \@@_postscript:x
      {
        mark /_objdef ~ \driver_pdf_object_ref:n {#1}
        /type
        \str_case_e:nn
          { \prop_item:Nn \g_@@_pdf_object_prop {#1} }
          {
            { array }   { /array }
            { dict }    { /dict }
            { fstream } { /stream }
            { stream }  { /stream }
          }
        /OBJ ~ pdfmark
      }
    \use:c
      { @@_pdf_object_write_ \prop_item:Nn \g_@@_pdf_object_prop {#1} :nn }
      {#1} {#2}
  }
\cs_new_protected:Npn \@@_pdf_object_write_array:nn #1#2
  {
    \@@_postscript:x
      {
        mark ~ \driver_pdf_object_ref:n {#1}
          [ ~ \exp_not:n {#2} ~ ] ~ /PUTINTERVAL ~ pdfmark
      }
  }
\cs_new_protected:Npn \@@_pdf_object_write_dict:nn #1#2
  {
    \@@_postscript:x
      {
        mark ~ \driver_pdf_object_ref:n {#1}
          << \exp_not:n {#2} >> /PUT ~ pdfmark
      }
  }
\cs_new_protected:Npn \@@_pdf_object_write_stream:nn #1#2
  {
    \exp_args:Nx
      \@@_pdf_object_write_stream:nnn
        { \driver_pdf_object_ref:n {#1} }
        #2
  }
\cs_new_protected:Npn \@@_pdf_object_write_stream:nnn #1#2#3
  {
    \@@_postscript:n
      {
        [nobreak]
        mark ~ #1 ~ ( #3 ) /PUT ~ pdfmark ~
        mark ~ #1 ~ << #2 >> /PUT ~ pdfmark
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsubsection{Annotations}
%
% In \texttt{dvips}, annotations have to be constructed manually. As such,
% we need the object code above for some definitions.
%
% \begin{macro}
%   {
%     driver.annotation.border ,
%     driver.annotation.ll     ,
%     drive.annotation.ur      ,
%     driver.link.ll           ,
%     drive.link.ur            ,
%     driver.linkmargin        ,
%     driver.pt.dvi
%   }
%   The link margin size has to be defined at the off: default as for
%   \pdfTeX{}. The size conversions have to be done in PostScript as
%   there can be a magnification active.
%    \begin{macrocode}
\@@_literal:n
  {
    !
    /driver.annotation.border
      { /Rect [ driver.llx ~ driver.lly ~ driver.urx ~ driver.ury ] } def
    /driver.annotation.ll
      {
        currentpoint
        /driver.lly ~ exch ~ def
        /driver.llx ~ exch ~ def
      }
        def
    /driver.annotation.ur
      {
        currentpoint
        /driver.ury ~ exch ~ def
        /driver.urx ~ exch ~ def
      }
        def
    /driver.link.ll
      {
        currentpoint ~
        driver.linkmargin ~ add ~
        driver.linkdp.min ~ add
        /driver.lly ~ exch ~ def ~
        driver.linkmargin ~ sub
        /driver.llx ~ exch ~ def
      }
        def
    /driver.link.ur
      {
        currentpoint ~
        driver.linkmargin ~ sub ~
        driver.linkht.min ~ sub
        /driver.ury ~ exch ~ def ~
        driver.linkmargin ~ add
        /driver.urx ~ exch ~ def
      }
        def
    /driver.linkmargin { 1 ~ driver.pt.dvi } def
    /driver.pt.dvi { 72.27 ~ div ~ Resolution ~ mul } def
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{variable}{\l_@@_pdf_content_box}
%   The content of an annotation.
%    \begin{macrocode}
\box_new:N \l_@@_pdf_content_box
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_pdf_model_box}
%   For creating model sizing for links.
%    \begin{macrocode}
\box_new:N \l_@@_pdf_model_box
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_pdf_annotation_int}
%   Needed as objects which are not annotations could be created.
%    \begin{macrocode}
\int_new:N \g_@@_pdf_annotation_int
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\driver_pdf_annotation:nnnn}
% \begin{macro}{driver.llx, driver.lly, driver.urx, driver.ury}
%   Annotations are objects, but we track them separately. Notably, they are
%   not in the object data lists. Here, to get the co-ordinates of the
%   annotation, we need to have the data collected at the PostScript level.
%   That requires a bit of box trickery (effectively a \LaTeXe{} |picture|
%   of zero size). Once the data is collected, use it to set up the annotation
%   border.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_annotation:nnnn #1#2#3#4
  {
    \box_move_down:nn {#3}
      { \@@_postscript:n { driver.annotation.ll } }
    \hbox:n {#4}
    \box_move_up:nn {#2}
      {
        \tex_kern:D \dim_eval:n {#1} \scan_stop:
        \@@_postscript:n { driver.annotation.ur }
      }
    \int_gincr:N \g_@@_pdf_object_int
    \int_gset_eq:NN \g_@@_pdf_annotation_int \g_@@_pdf_object_int
    \@@_postscript:x
      {
          mark /_objdef { driver.obj \int_use:N \g_@@_pdf_object_int }
          driver.annotation.border ~
          #4 ~
          /ANN ~ pdfmark
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[EXP]{\driver_pdf_annotation_last:}
%   Provide the last annotation we created: could get tricky of course if
%   other packages are loaded.
%    \begin{macrocode}
\cs_new:Npn \driver_pdf_annotation_last:
  { { driver.obj \int_use:N \g_@@_pdf_annotation_int } }
%    \end{macrocode}
% \end{macro}
%
% \begin{variable}{\g_@@_pdf_link_int}
%   To track annotations which are links.
%    \begin{macrocode}
\int_new:N \g_@@_pdf_link_int
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\driver_pdf_link_goto:nnn, \driver_pdf_link_user:nnn}
% \begin{macro}{\@@_pdf_link:nnnn}
% \begin{macro}{\@@_pdf_link_minima:}
% \begin{macro}{\@@_pdf_link_outerbox:n}
% \begin{macro}
%   {
%     driver.linkdp.min, driver.linkht.min,
%     driver.llx, driver.lly,
%     driver.ury, driver.ury,
%     driver.linkdict,
%     driver.outerbox,
%     driver.baselineskip
%   }
%   Links are crated like annotations but with dedicated code to allow for
%   adjusting the size of the rectangle. In contrast to \pkg{hyperref},
%   we use the approach of creating an object explicitly here rather than
%   use the |[| syntax. % ]
%   That has the advantage of allowing us to provide a reference to the link
%   later: that is not possible if one uses the shortcut syntax.
%
%   Taking the idea of |evenboxes| from \pkg{hypdvips}, we implement a minimum
%   box height and depth for link placement. This means that \enquote{underlining}
%   with a hyperlink will generally give an even appearance. However, to ensure
%   that the full content is always above the link border, we do not allow
%   this to be negative (contrast \pkg{hypdvips} approach). The result should
%   be similar to \pdfTeX{} in the vast majority of foreseeable cases.
%
%  Getting the outer dimensions of the text area may be better using a two-pass
%  approach and |\tex_savepos:D|. That plus format mode are still to re-examine.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_link_goto:nnn #1#2#3
  { \@@_pdf_link:nnnn {#1} { /GoTo } {#2} {#3} }
\cs_new_protected:Npn \driver_pdf_link_user:nnn #1#2#3
  { \@@_pdf_link:nnnn {#1} { } {#2} {#3} }
\cs_new_protected:Npn \@@_pdf_link:nnnn #1#2#3#4
  {
    \@@_postscript:n
      { /driver.linkdict ( #4 ) def }
    \hbox_set:Nn \l_@@_pdf_content_box {#4}
    \@@_pdf_link_minima:
    \box_move_down:nn { \box_dp:N \l_@@_pdf_content_box }
      { \hbox:n { \@@_postscript:n { driver.link.ll } } }
    \box_use:N \l_@@_pdf_content_box
    \box_move_up:nn { \box_ht:N \l_@@_pdf_content_box }
      {
        \hbox:n
          { \@@_postscript:n { driver.link.ur } }
      }
    \exp_args:Nx \@@_driver_link_outerbox:n
      {
%<*initex>
         \l_galley_total_left_margin_dim
%</initex>
%<*package>
         \int_if_odd:nTF { \value { page } }
           { \oddsidemargin }
           { \evensidemargin }
%</package>
      }
    \int_gincr:N \g_@@_pdf_object_int
    \int_gset_eq:NN \g_@@_pdf_link_int \g_@@_pdf_object_int
    \@@_postscript:x
      {
        mark /_objdef ~ { driver.obj \int_use:N \g_@@_pdf_link_int }
        driver.annotation.border
        /Subtype /Link #1 #2 #3
        /ANN ~ pdfmark
      }
  }
\cs_new_protected:Npn \@@_pdf_link_minima:
  {
    \hbox_set:Nn \l_@@_pdf_model_box { Gg }
    \@@_postscript:x
      {
        /driver.linkdp.min ~
          \dim_to_decimal:n
            {
              \dim_max:nn
                {
                    \box_dp:N \l_@@_pdf_model_box
                  - \box_dp:N \l_@@_pdf_content_box
                }
                { 0pt }
            } ~
              driver.pt.dvi ~ def
        /driver.linkht.min ~
          \dim_to_decimal:n
            {
              \dim_max:nn
                {
                    \box_ht:N \l_@@_pdf_model_box
                  - \box_ht:N \l_@@_pdf_content_box
                }
                { 0pt }
            } ~
              driver.pt.dvi ~ def
      }
  }
\cs_new_protected:Npn \@@_driver_link_outerbox:n #1
  {
    \@@_postscript:x
      {
        /driver.outerbox
          [
            \dim_to_decimal:n {#1} ~
            \dim_to_decimal:n { -\box_dp:N \l_@@_pdf_model_box } ~
%<*initex>
            \dim_to_decimal:n { #1 + \l_galley_text_width_dim } ~
%</initex>
%<*package>
            \dim_to_decimal:n { #1 + \linewidth } ~
%</package>
            \dim_to_decimal:n { -\box_dp:N \l_@@_pdf_model_box }
          ]
          [ exch { driver.pt.dvi } forall ] def
        /driver.baselineskip ~
          \dim_to_decimal:n
            { \dim_max:nn { 0pt } { \tex_baselineskip:D } } ~
              driver.pt.dvi ~ def
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\driver_pdf_link_last:}
%   The same as annotations, but with a custom integer.
%    \begin{macrocode}
\cs_new:Npn \driver_pdf_link_last:
  { { driver.obj \int_use:N \g_@@_pdf_link_int } }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\driver_pdf_link_margin:n}
%   Convert to big points and pass to PostScript.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_link_margin:n #1
  {
    \@@_postscript:x
      {
        /driver.linkmargin { \dim_to_decimal:n {#1} ~ driver.pt.dvi } def
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Structure}
%
% \begin{macro}{\driver_pdf_compresslevel:n}
% \begin{macro}{\driver_pdf_objects_enable:, \driver_pdf_objects_disable:}
%   These are all no-ops.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_compresslevel:n #1 { }
\cs_new_protected:Npn \driver_pdf_objects_enable: { }
\cs_new_protected:Npn \driver_pdf_objects_disable: { }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   {\driver_pdf_version_major_gset:n, \driver_pdf_version_minor_gset:n}
%   Data not available!
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_version_major_gset:n #1 { }
\cs_new_protected:Npn \driver_pdf_version_minor_gset:n #1 { }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP]{\driver_pdf_version_major:, \driver_pdf_version_minor:}
%   Data not available!
%    \begin{macrocode}
\cs_new:Npn \driver_pdf_version_major: { -1 }
\cs_new:Npn \driver_pdf_version_minor: { -1 }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</dvips>
%    \end{macrocode}
%
% \subsection{\texttt{pdfmode} driver}
%
%    \begin{macrocode}
%<*pdfmode>
%    \end{macrocode}
%
% \subsubsection{Annotations}
%
% \begin{macro}{\driver_pdf_annotation:nnnn}
%   Simply pass the raw data through, just dealing with evaluation of dimensions.
%    \begin{macrocode}
\cs_new_protected:Npx \driver_annotation:nnnn #1#2#3#4
  {
    \cs_if_exist:NTF \tex_pdfextension:D
      { \tex_pdfextension:D annot ~ }
      { \tex_pdfannot:D }
      width  ~ \exp_not:N \dim_eval:n {#1} ~
      height ~ \exp_not:N \dim_eval:n {#2} ~
      depth  ~ \exp_not:N \dim_eval:n {#3} ~
      {#4}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP]{\driver_pdf_annotation_last:}
%   A tiny amount of extra data gets added here.
%    \begin{macrocode}
\cs_new:Npx \driver_pdf_annotation_last:
  {
    \exp_not:N \tex_the:D 
    \cs_if_exist:NTF \tex_pdffeedback:D
      { \exp_not:N \tex_pdffeedback:D annot ~ }
      { \exp_not:N \tex_pdflastannot:D }
      0 ~ R
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\driver_pdf_link_goto:nnn, \driver_pdf_link_user:nnn}
% \begin{macro}{\@@_pdf_link:nnnn}
%   Links are all created using the same internals.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_link_goto:nnn #1#2#3
  { \@@_pdf_link_begin:nnnn {#1} { goto~name } {#2} {#3} }
\cs_new_protected:Npn \driver_pdf_link_user:nnn #1#2#3
  { \@@_pdf_link_begin:nnnn {#1} { user } {#2} {#3} }
\cs_new_protected:Npx \@@_pdf_link_begin:nnnn #1#2#3#4
  {
    \cs_if_exist:NTF \tex_pdfextension:D
      { \tex_pdfextension:D startlink ~ }
      { \tex_pdfstartlink:D }
      attr {#1}
      #2 { /Subtype /Link #3 }
    #4
    \cs_if_exist:NTF \tex_pdfextension:D
      { \tex_pdfextension:D endlink \scan_stop: }
      { \tex_pdfendlink:D }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\driver_pdf_link_last:}
%   Formatted for direct use.
%    \begin{macrocode}
\cs_new:Npx \driver_pdf_link_last:
  {
    \exp_not:N \tex_the:D
    \cs_if_exist:NTF \tex_pdffeedback:D
      { \exp_not:N \tex_pdffeedback:D lastlink \scan_stop: }
      { \exp_not:N \tex_pdflastlink:D }
      ~ 0 ~ R
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\driver_pdf_link_margin:n}
%   A simple task: pass the data to the primitive.
%    \begin{macrocode}
\cs_new_protected:Npx \driver_pdf_link_margin:n #1
  {
    \cs_if_exist:NTF \tex_pdfvariable:D
      { \exp_not:N \tex_pdfvariable:D linkmargin }
      { \exp_not:N \tex_pdflinkmargin:D }
        \exp_not:N \dim_eval:n {#1} \scan_stop:
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Objects}
%
% \begin{variable}{\g_@@_pdf_object_prop}
%   For tracking objects to allow finalisation.
%    \begin{macrocode}
\prop_new:N \g_@@_pdf_object_prop
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\driver_pdf_object_new:nn}
% \begin{macro}[EXP]{\driver_pdf_object_ref:n}
%   Declaring objects means reserving at the PDF level plus starting
%   tracking.
%    \begin{macrocode}
\group_begin:
  \cs_set_protected:Npn \@@_tmp:w #1#2
    {
      \cs_new_protected:Npx \driver_pdf_object_new:nn ##1##2
        {
          #1 reserveobjnum ~
          \int_const:cn
            { g_@@_pdf_object_ \exp_not:N \tl_to_str:n {##1} _int }
            {#2}
          \prop_gput:Nnn \exp_not:N \g_@@_pdf_object_prop {##1} {##2}
        }
    }
  \cs_if_exist:NTF \tex_pdfextension:D
    {
      \@@_tmp:w
        { \tex_pdfextension:D obj ~ }
        { \tex_pdffeedback:D lastobj \scan_stop: }
    }
    { \@@_tmp:w { \tex_pdfobj:D } { \tex_pdflastobj:D } }
\group_end:
\cs_new:Npn \driver_pdf_object_ref:n #1
  { \int_use:c { g_@@_pdf_object_ \tl_to_str:n {#1} _int } ~ 0 ~ R }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\driver_pdf_object_write:nn}
% \begin{macro}[EXP]{\@@_exp_not_i:nn, \@@_exp_not_ii:nn}
%   Writing the data needs a little information about the structure of the
%   object.
%    \begin{macrocode}
\group_begin:
  \cs_set_protected:Npn \@@_tmp:w #1
    {
      \cs_new_protected:Npn \driver_pdf_object_write:nn ##1##2
        {
          \tex_immediate:D #1 useobjnum ~
          \int_use:c
            { g_@@_pdf_object_ \tl_to_str:n {##1} _int }
            \str_case_e:nn
              { \prop_item:Nn \g_@@_pdf_object_prop {##1} }
              {
                { array } { { [ ~ \exp_not:n {##2} ~ ] } }
                { dict }  { { << ~ \exp_not:n {##2} ~ >> } }
                { fstream }
                  {
                    stream ~ attr ~ { \@@_exp_not_i:nn ##2 } ~
                      file ~ { \@@_exp_not_ii:nn ##2 }
                  }
                { stream }
                  {
                    stream ~ attr ~ { \@@_exp_not_i:nn ##2 } ~ 
                      { \@@_exp_not_ii:nn ##2 }
                  }
              }
        }
    }
  \cs_if_exist:NTF \tex_pdfextension:D
    { \@@_tmp:w { \tex_pdfextension:D obj ~ } }
    { \@@_tmp:w { \tex_pdfobj:D } }
\group_end:
\cs_new:Npn \@@_exp_not_i:nn #1#2 { \exp_not:n {#1} }
\cs_new:Npn \@@_exp_not_ii:nn #1#2 { \exp_not:n {#2} }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsubsection{Structure}
%
% \begin{macro}{\driver_pdf_compresslevel:n}
% \begin{macro}{\driver_pdf_objects_enable:, \driver_pdf_objects_disable:}
% \begin{macro}{\@@_pdf_objectlevel:n}
%   Simply pass data to the engine.
%    \begin{macrocode}
\cs_new_protected:Npx \driver_pdf_compresslevel:n #1
  {
    \cs_if_exist:NTF \tex_pdfcompresslevel:D
      { \tex_pdfcompresslevel:D }
      { \tex_pdfvariable:D compresslevel }
      \exp_not:N \int_value:w \exp_not:N \int_eval:n {#1} \scan_stop:
  }
\cs_new_protected:Npn \driver_pdf_objects_enable:
  { \@@_pdf_objectlevel:n { 2 } }
\cs_new_protected:Npn \driver_pdf_objects_disable:
  { \@@_pdf_objectlevel:n { 0 } }
\cs_new_protected:Npx \@@_pdf_objectlevel:n #1
  {
    \cs_if_exist:NTF \tex_pdfobjcompresslevel:D
      { \tex_pdfobjcompresslevel:D }
      { \tex_pdfvariable:D objcompresslevel }
      #1 \scan_stop:
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   {\driver_pdf_version_major_gset:n, \driver_pdf_version_minor_gset:n}
%   At present, we don't have a primitive for the major version in \pdfTeX{},
%   but we anticipate one \ldots
%    \begin{macrocode}
\cs_new_protected:Npx \driver_pdf_version_major_gset:n #1
  {
    \cs_if_exist:NTF \tex_pdfvariable:D
      {
        \int_compare:nNnT \tex_luatexversion:D > { 106 }
          {
            \exp_not:N \tex_global:D \tex_pdfvariable:D majorversion
              \exp_not:N \int_eval:n {#1} \scan_stop:
          }
      }
      {
        \cs_if_exist:NT \tex_pdfmajorversion:D
          {
            \exp_not:N \tex_global:D \tex_pdfmajorversion:D
              \exp_not:N \int_eval:n {#1} \scan_stop:
          }
      }
  }
\cs_new_protected:Npx \driver_pdf_version_minor_gset:n #1
  {
    \exp_not:N \tex_global:D
    \cs_if_exist:NTF \tex_pdfminorversion:D
      { \exp_not:N \tex_pdfminorversion:D }
      { \tex_pdfvariable:D minorversion }
        \exp_not:N \int_eval:n {#1} \scan_stop:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP]{\driver_pdf_version_major:, \driver_pdf_version_minor:}
%   At present, we don't have a primitive for the major version!
%    \begin{macrocode}
\cs_new_protected:Npx \driver_pdf_version_major:
  {
    \cs_if_exist:NTF \tex_pdfvariable:D
      {
        \int_compare:nNnTF \tex_luatexversion:D > { 106 }
          { \exp_not:N \tex_the:D \tex_pdfvariable:D majorversion }
          { 1 }
      }
      {
        \cs_if_exist:NTF \tex_pdfmajorversion:D
          { \exp_not:N \tex_the:D \tex_pdfmajorversion:D }
          { 1 }
      }
  }
\cs_new:Npx \driver_pdf_version_minor:
  {
    \exp_not:N \tex_the:D
    \cs_if_exist:NTF \tex_pdfminorversion:D
      { \exp_not:N \tex_pdfminorversion:D }
      { \tex_pdfvariable:D minorversion }
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</pdfmode>
%    \end{macrocode}
%
% \subsection{\texttt{dvipdfmx} driver}
%
%    \begin{macrocode}
%<*dvipdfmx|xdvipdfmx>
%    \end{macrocode}
%
% \begin{macro}{\@@_pdf:n, \@@_pdf:x}
%   A generic function for the driver PDF specials: used where we can.
%    \begin{macrocode}
\cs_new_protected:Npx \@@_pdf:n #1
  { \@@_literal:n { pdf: #1 } }
\cs_generate_variant:Nn \@@_pdf:n { x }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Objects}
%
% \begin{variable}{\g_@@_pdf_object_int, \g_@@_pdf_object_prop}
%   For tracking objects to allow finalisation.
%    \begin{macrocode}
\int_new:N \g_@@_pdf_object_int
\prop_new:N \g_@@_pdf_object_prop
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\driver_pdf_object_new:nn}
% \begin{macro}[EXP]{\driver_pdf_object_ref:n}
%   Objects are tracked at the macro level, but we don't have to do anything
%   at this stage.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_object_new:nn #1#2
  {
    \int_gincr:N \g_@@_pdf_object_int
    \int_const:cn
      { g_@@_pdf_object_ \tl_to_str:n {#1} _int }
      { \g_@@_pdf_object_int }
    \prop_gput:Nnn \g_@@_pdf_object_prop {#1} {#2}
  }
\cs_new:Npn \driver_pdf_object_ref:n #1
  { @l3obj \int_use:c { g_@@_pdf_object_ \tl_to_str:n {#1} _int } }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\driver_pdf_object_write:nn}
% \begin{macro}{\@@_pdf_object_write:nnn}
% \begin{macro}
%   {
%     \@@_pdf_object_write_array:nn   ,
%     \@@_pdf_object_write_dict:nn    ,
%     \@@_pdf_object_write_fstream:nn ,
%     \@@_pdf_object_write_stream:nn
%   }
% \begin{macro}{\@@_pdf_object_write_stream:nnnn}
%   This is where we choose the actual type.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_object_write:nn #1#2
  {
    \exp_args:Nx \@@_pdf_object_write:nnn
      { \prop_item:Nn \g_@@_pdf_object_prop {#1} } {#1} {#2}
  }
\cs_new_protected:Npn \@@_pdf_object_write:nnn #1#2#3
  { \use:c { @@_pdf_object_write_ #1 :nn } {#2} {#3} }
\cs_new_protected:Npn \@@_pdf_object_write_array:nn #1#2
  {
    \@@_pdf:x
      {
        obj ~ \driver_pdf_object_ref:n {#1} ~
          [ ~ \exp_not:n {#2} ~ ]
      }
  }
\cs_new_protected:Npn \@@_pdf_object_write_dict:nn #1#2
  {
    \@@_pdf:x
      {
        obj ~ \driver_pdf_object_ref:n {#1} ~
          << ~ \exp_not:n {#2} ~ >>
      }
  }
\cs_new_protected:Npn \@@_pdf_object_write_fstream:nn #1#2
  { \@@_pdf_object_write_stream:nnnn { f } {#1} #2 }
\cs_new_protected:Npn \@@_pdf_object_write_stream:nn #1#2
  { \@@_pdf_object_write_stream:nnnn { } {#1} #2 }
\cs_new_protected:Npn \@@_pdf_object_write_stream:nnnn #1#2#3#4
  {
    \@@_pdf:x
      {
        #1 stream ~ \driver_pdf_object_ref:n {#2} ~
          ( \exp_not:n {#4} ) ~ << \exp_not:n {#3} >>
        
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsubsection{Annotations}
%
% \begin{variable}{\g_@@_pdf_annotation_int}
%   Needed as objects which are not annotations could be created.
%    \begin{macrocode}
\int_new:N \g_@@_pdf_annotation_int
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\driver_pdf_annotation:nnnn}
%   Annotations are objects, but we track them separately. Notably, they are
%   not in the object data lists.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_annotation:nnnn #1#2#3#4
  {
    \int_gincr:N \g_@@_pdf_object_int
    \int_gset_eq:NN \g_@@_pdf_annotation_int \g_@@_pdf_object_int
    \@@_pdf:x
      {
        ann ~ @l3obj \int_use:N \g_@@_pdf_object_int \c_space_tl
        width  ~ \dim_eval:n {#1} ~
        height ~ \dim_eval:n {#2} ~
        depth  ~ \dim_eval:n {#3} ~
        << #4 >>
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\driver_pdf_link_goto:nnn, \driver_pdf_link_user:nnn}
% \begin{macro}{\@@_pdf_link_begin:nnnn}
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_link_goto:nnn #1#2#3
  { \@@_pdf_link:nnnn {#1} { /GoTo } {#2} {#3} }
\cs_new_protected:Npn \driver_pdf_link_user:nnn #1#2#3
  { \@@_pdf_link:nnnn {#1} { } {#2} {#3} }
\cs_new_protected:Npn \@@_pdf_link:nnnn #1#2#3#4
  {
    \@@_pdf:n
      {
         bann
         <<
           /Type /Annot
           /Subtype /Link
           #1 ~ #2 ~ #3
         >>
      }
    #4
    \@@_pdf:n { eann }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\driver_pdf_link_last:}
%   Data not available.
%    \begin{macrocode}
\cs_new:Npn \driver_pdf_link_last: { }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\driver_pdf_link_margin:n}
%   Nope.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_link_margin:n #1 { }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Structure}
%
% \begin{macro}{\driver_pdf_compresslevel:n}
% \begin{macro}{\driver_pdf_objects_enable:, \driver_pdf_objects_disable:}
%   Pass data to the driver: these are a one-shot.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_compresslevel:n #1
  { \@@_literal:x { dvipdfmx:config~z~ \int_eval:n {#1} } }
\cs_new_protected:Npn \driver_pdf_objects_enable: { }
\cs_new_protected:Npn \driver_pdf_objects_disable:
  { \@@_literal:n { dvipdfmx:config~C~0x40 } }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   {\driver_pdf_version_major_gset:n, \driver_pdf_version_minor_gset:n}
%   We start with the assumption that the default is active.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_version_major:n #1
  {
    \cs_gset:Npx \driver_pdf_version_major: { \int_eval:n {#1} }
    \@@_literal:x { pdf:majorversion \driver_pdf_version_major: }
  }
\cs_new_protected:Npn \driver_pdf_version_minor:n #1
  {
    \cs_gset:Npx \driver_pdf_version_minor: { \int_eval:n {#1} }
    \@@_literal:x { pdf:minorversion \driver_pdf_version_minor: }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP]{\driver_pdf_version_major:, \driver_pdf_version_minor:}
%   We start with the assumption that the default is active.
%    \begin{macrocode}
\cs_new:Npn \driver_pdf_version_major: { 1 }
\cs_new:Npn \driver_pdf_version_minor: { 5 }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</dvipdfmx|xdvipdfmx>
%    \end{macrocode}
%
% \subsection{\texttt{dvisvgm} driver}
%
%    \begin{macrocode}
%<*dvisvgm>
%    \end{macrocode}
%
% \subsubsection{Objects}
%
% \begin{macro}{\driver_pdf_object_new:nn}
% \begin{macro}[EXP]{\driver_pdf_object_ref:n}
% \begin{macro}{\driver_pdf_object_write:nn}
%   All no-ops here.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_object_new:nn #1#2 { }
\cs_new:Npn \driver_pdf_object_ref:n #1 { }
\cs_new_protected:Npn \driver_pdf_object_write:nn #1#2 { }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsubsection{Structure}
%
% \begin{macro}{\driver_pdf_compresslevel:n}
% \begin{macro}{\driver_pdf_objects_enable:, \driver_pdf_objects_disable:}
%   These are all no-ops.
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_compresslevel:n #1 { }
\cs_new_protected:Npn \driver_pdf_objects_enable: { }
\cs_new_protected:Npn \driver_pdf_objects_disable: { }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   {\driver_pdf_version_major_gset:n, \driver_pdf_version_minor_gset:n}
%   Data not available!
%    \begin{macrocode}
\cs_new_protected:Npn \driver_pdf_version_major_gset:n #1 { }
\cs_new_protected:Npn \driver_pdf_version_minor_gset:n #1 { }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP]{\driver_pdf_version_major:, \driver_pdf_version_minor:}
%   Data not available!
%    \begin{macrocode}
\cs_new:Npn \driver_pdf_version_major: { -1 }
\cs_new:Npn \driver_pdf_version_minor: { -1 }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</dvisvgm>
%    \end{macrocode}
%
%    \begin{macrocode}
%</initex|package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
